{"version":3,"sources":["../node_modules/form-data/lib/browser.js","pages/DAO/pages/AddNewGate/index.tsx","pages/DAO/pages/AddNewGate/styles.tsx","pages/DAO/pages/AddNewGate/Components/SearhedItem/styles.jsx","pages/DAO/pages/AddNewGate/Components/SearhedItem/index.jsx","pages/DAO/pages/AddNewGate/Components/SearchedAdmin/style.jsx","pages/DAO/pages/AddNewGate/Components/SearchedAdmin/index.jsx","pages/DAO/pages/AddNewGate/Components/SearchRes/style.jsx","pages/DAO/pages/AddNewGate/Components/SearchRes/index.jsx","api/IPFSFileUpload.js","api/database/useCreateGate.js"],"names":["module","exports","self","FormData","window","NFT","YesNo","Page","styled","div","Container","form","CentralizedLoader","Header","label","h1","Button","button","InputSmall","FormStyled","Input","AllowedFileType","CategoryList","p","span","props","image","img","SearchBox","IconBox","color","border","mr","ml","Text","Cross","SearchedItem","val","id","remove","onClick","e","ProfilePicture","src","SearchedAdmin","removeAdmin","pfp","name","Name","SearchRes","res","addAdmin","PINATA","uploadFileToIPFS","a","axios","post","headers","pinata_api_key","pinata_secret_api_key","data","IpfsHash","AddGateForm","userInfo","useAuth","state","useLocation","edit","gateData","useState","title","setTitle","description","setDescription","retroactiveEarners","setRetroactiveEarners","uploadFile","setUploadFile","category","setCategory","categories","categoryList","setCategoryList","skill","setSkill","skillList","setSkillList","knowledge","setKnowledge","knowledgeList","setKnowledgeList","attitude","setAttitude","attitudeList","setAttitudeList","prerequisite","prerequisiteList","keysNumber","keyRequired","setKeyRequired","badge","badgeName","setBadgeName","admin","setAdmin","adminList","map","username","wallet","setAdminList","updateLoading","setUpdateeLoading","adminSearch","setAdminSearch","NFTupdated","setPrereqsSearch","nftType","charAt","toUpperCase","substring","toLowerCase","NFTType","setNFTType","YES","wantPreReqs","setWantPreReqs","daoData","useOutletContext","useMutation","gql","GATE_CREATE","createGate","loading","called","error","useMemo","useCreateGate","updateGate","useUpdateGate","useLazyQuery","searchUsers","variables","filter","or","wildcard","bio","searchByUsers","searchUserData","searchUserLoading","searchUserCalled","refetch","searchGates","searchByGates","searchGateData","searchGateCalled","navigate","useNavigate","removeCategories","value","i","removeSkills","removeKnowledge","removeAttitude","prev","adm","onSave","preventDefault","alert","append","hash","gateID","uuidv4","input","daoID","admins","length","skills","attitudes","published","holders","links","preRequisites","completedGates","prereq","ipfsURL","console","log","onEdit","useEffect","clear","setTimeout","clearTimeout","results","items","slice","user","gate","Space","BackButton","url","dao","style","marginTop","onSubmit","PublishedState","NOT_PUBLISHED","Form","Fieldset","Label","htmlFor","onChange","target","type","placeholder","required","Textarea","onKeyPress","key","Fragment","GridBox","cols","Radio","checked","NO","setImage","defaultImageURL","SearchInput","Loader","size","retroactiveEarner","idx","InputWrapper","add","updateRetroactiveEarner","removeRetroactiveEarner","undefined","IconButton","width","alignSelf"],"mappings":"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","file":"static/js/7.c528e2c8.chunk.js","sourcesContent":["/* eslint-env browser */\nmodule.exports = typeof self == 'object' ? self.FormData : window.FormData;\n","import React, { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\n// Styling\nimport * as Styled from './styles';\nimport { FormStyled } from '../../../../components/Form';\n\n// Components\nimport SearchedItem from './Components/SearhedItem';\nimport SearchedAdmin from './Components/SearchedAdmin';\nimport SearchRes from './Components/SearchRes';\nimport SearchResGate from './Components/SearchResGate';\nimport { ImageUpload } from '../../../../components/Form';\n\n// Hooks\nimport { useCreateGate } from '../../../../api/database/useCreateGate';\nimport { useNavigate, useOutletContext, useLocation } from 'react-router-dom';\nimport { useAuth } from '../../../../contexts/UserContext';\n\n// Icons\nimport { FaTrashAlt, FaPlus } from 'react-icons/fa';\n\n// Utils\nimport { uploadFileToIPFS } from '../../../../api/IPFSFileUpload';\nimport FormData from 'form-data';\nimport Loader from '../../../../components/Loader';\nimport { useEffect } from 'react';\n\n// API\nimport useUpdateGate from '../../../../api/database/useUpdateGate';\nimport { gql, useLazyQuery } from '@apollo/client';\nimport { searchGates, searchUsers } from '../../../../graphql/queries';\nimport {\n    DAO,\n    Gate,\n    PublishedState,\n    TaskStatus,\n    User,\n} from '../../../../graphql/API';\n\n// Components\nimport BackButton from '../../../../components/BackButton';\nimport Space from '../../../../components/Space';\nimport Page from '../../../../components/Page';\n\n/* This is a type definition for the GateData interface. It is used to make sure that the data that is\npassed to the component is of the correct type. */\ninterface GateData extends Gate {\n    holders: number;\n    keysDone: number;\n    keysNumber: number;\n    taskStatus: TaskStatus[];\n    adminList: User[];\n    preRequisitesList: Gate[];\n}\n\n/* Defining a type for the admin object. */\ninterface IAdmin {\n    name: string;\n    username: string;\n    pfp: string;\n    id: string;\n    wallet: string;\n}\n\n/* Defining a type called IPrerequisite. */\ninterface IPrerequisite {\n    name: string;\n    id: string;\n}\n\n/* Creating a type that can be used to represent a NFT. */\nenum NFT {\n    CONTRIBUTOR = 'Contributor',\n    REWARD = 'Reward',\n}\n\n/* Creating a YesNo enum with two values, YES and NO. */\nenum YesNo {\n    YES = 'Yes',\n    NO = 'No',\n}\n\n/* This is a React component that will render the form to add a gate. */\nconst AddGateForm = () => {\n    const { userInfo }: Record<string, any> = useAuth();\n    const { state }: Record<string, any> = useLocation();\n    const edit = state ? true : false;\n    const gateData: GateData | null = edit ? state.gateData : null;\n\n    // State\n    const [title, setTitle] = useState<string>(edit ? gateData.name : '');\n    const [description, setDescription] = useState<string>(\n        edit ? gateData.description : ''\n    );\n    const [retroactiveEarners, setRetroactiveEarners] = useState<string[]>(\n        edit ? gateData.retroactiveEarners : ['']\n    );\n    const [uploadFile, setUploadFile] = useState(null);\n    const [category, setCategory] = useState<string>('');\n    const [categoryList, setCategoryList] = useState<(string | null)[]>(\n        edit ? gateData.categories : []\n    );\n    const [skill, setSkill] = useState<string>(null);\n    const [skillList, setSkillList] = useState<(string | null)[]>([]);\n    const [knowledge, setKnowledge] = useState<string>(null);\n    const [knowledgeList, setKnowledgeList] = useState<(string | null)[]>([]);\n    const [attitude, setAttitude] = useState<string>(null);\n    const [attitudeList, setAttitudeList] = useState<(string | null)[]>([]);\n    const [prerequisite, setPrerequisite] = useState<string>('');\n    const [prerequisiteList, setPrerequisiteList] = useState<\n        (IPrerequisite | null)[]\n    >([]);\n    const [keyRequired, setKeyRequired] = useState<number>(\n        edit ? gateData.keysNumber : 0\n    );\n    const [badgeName, setBadgeName] = useState<string>(\n        edit ? gateData.badge.name : ''\n    );\n    const [admin, setAdmin] = useState<string>('');\n    const [adminList, setAdminList] = useState<IAdmin[]>(\n        edit\n            ? gateData.adminList.map((admin) => ({\n                  name: admin?.name || '',\n                  username: admin?.username || '',\n                  pfp: admin?.pfp || '',\n                  id: admin?.id || '',\n                  wallet: admin?.wallet || '',\n              }))\n            : [\n                  {\n                      name: userInfo?.name || '',\n                      username: userInfo?.username || '',\n                      pfp: userInfo?.pfp || '',\n                      id: userInfo?.id || '',\n                      wallet: userInfo?.wallet || '',\n                  },\n              ]\n    );\n    //const [adminIDList, setAdminIDList] = useState(edit?gateData.admins:[userInfo.id]);\n    const [updateLoading, setUpdateeLoading] = useState<boolean>(false);\n    const [adminSearch, setAdminSearch] = useState([]);\n    const [NFTupdated, setNFTupdated] = useState<boolean>(edit);\n    const [prereqsSearch, setPrereqsSearch] = useState([]);\n    const [NFTType, setNFTType] = useState<NFT | null>(\n        edit\n            ? (((gateData.nftType as string).charAt(0).toUpperCase() +\n                  (gateData.nftType as string)\n                      .substring(1)\n                      .toLowerCase()) as NFT)\n            : null\n    );\n    const [wantPreReqs, setWantPreReqs] = useState<YesNo | null>(\n        edit ? YesNo.YES : null\n    );\n\n    // Hooks\n    const { daoData }: { daoData: DAO } = useOutletContext();\n    const { createGate } = useCreateGate();\n    const { updateGate } = useUpdateGate();\n\n    const [\n        searchByUsers,\n        {\n            data: searchUserData,\n            loading: searchUserLoading,\n            refetch: searchUserRefetch,\n            called: searchUserCalled,\n        },\n    ] = useLazyQuery(gql(searchUsers), {\n        variables: {\n            filter: {\n                or: [\n                    { name: { wildcard: `*${admin.toLowerCase()}*` } },\n                    { username: { wildcard: `*${admin.toLowerCase()}*` } },\n                    { bio: { wildcard: `*${admin.toLowerCase()}*` } },\n                ],\n            },\n        },\n    });\n\n    const [\n        searchByGates,\n        {\n            data: searchGateData,\n            loading: searchGateLoading,\n            refetch: searchGateRefetch,\n            called: searchGateCalled,\n        },\n    ] = useLazyQuery(gql(searchGates), {\n        variables: {\n            filter: {\n                or: [\n                    {\n                        name: {\n                            wildcard: `*${prerequisite.toLowerCase()}*`,\n                        },\n                    },\n                ],\n            },\n        },\n    });\n\n    const navigate = useNavigate();\n\n    /* The addCategories function is called when the user presses the Enter key. \n    The function adds the current value of the category input to the categoryList array and clears\n    the input. */\n    const addCategories = (e: React.KeyboardEvent) => {\n        if (e.key === 'Enter') {\n            setCategoryList([...categoryList, category]);\n            setCategory('');\n        }\n    };\n\n    /**\n     * It removes the category from the list of categories.\n     */\n    const removeCategories = (id: number) => {\n        setCategoryList(categoryList.filter((value, i) => i !== id));\n    };\n\n    /* The addSkills function is called when the user presses the Enter key. \n    The function adds the current value of the skill input to the skillList array and clears\n    the input. */\n    const addSkills = (e: React.KeyboardEvent) => {\n        if (e.key === 'Enter') {\n            setSkillList([...skillList, skill]);\n            setSkill('');\n        }\n    };\n\n    /**\n     * It removes the skill from the list of skills.\n     */\n    const removeSkills = (id: number) => {\n        setSkillList(skillList.filter((value, i) => i !== id));\n    };\n\n    /* The addKnowledge function is called when the user presses the Enter key. \n    The function adds the current value of the knowledge input to the knowledgeList array and clears\n    the input. */\n    const addKnowledge = (e: React.KeyboardEvent) => {\n        if (e.key === 'Enter') {\n            setKnowledgeList([...knowledgeList, knowledge]);\n            setKnowledge('');\n        }\n    };\n\n    /**\n     * It removes the category from the list of knowledge.\n     */\n    const removeKnowledge = (id: number) => {\n        setKnowledgeList(knowledgeList.filter((value, i) => i !== id));\n    };\n\n    /* The addAttitude function is called when the user presses the Enter key. \n    The function adds the current value of the attitude input to the attitudeList array and clears\n    the input. */\n    const addAttitude = (e: React.KeyboardEvent) => {\n        if (e.key === 'Enter') {\n            setAttitudeList([...attitudeList, attitude]);\n            setAttitude('');\n        }\n    };\n\n    /**\n     * It removes the attitude from the list of attitudes.\n     */\n    const removeAttitude = (id: number) => {\n        setAttitudeList(attitudeList.filter((value, i) => i !== id));\n    };\n\n    /**\n     * It adds a prerequisite to the list of prerequisites.\n     */\n    const addPrerequisite = (gate: IPrerequisite) => {\n        setPrerequisiteList((prev) => [...prev, gate]);\n        setPrereqsSearch((prev) => prev.filter((obj) => obj.id !== gate.id));\n    };\n\n    /**\n     * Given an id, remove the prerequisite with that id from the prerequisite list\n     */\n    const removePrerequisite = (id: string) => {\n        setPrerequisiteList((prev) => prev.filter((gate) => gate.id !== id));\n    };\n\n    /**\n     * It adds an admin to the list of admins.\n     */\n    const addAdmin = (admin: IAdmin) => {\n        setAdminList([...adminList, admin]);\n        setAdminSearch((prev) => prev.filter((adm) => adm.id !== admin.id));\n    };\n\n    /**\n     * It removes the admin from the list of admins.\n     */\n    const removeAdmin = (id: string) => {\n        setAdminList((prev) => prev.filter((adm) => adm.id !== id));\n    };\n\n    const updateRetroactiveEarner = (e: string, idx: number) => {\n        const add = retroactiveEarners.map((value, i) => {\n            if (idx === i) {\n                return e;\n            }\n            return value;\n        });\n\n        setRetroactiveEarners(add);\n    };\n\n    /* The removeRetroactiveEarner function is called when the user clicks the remove button. It\n    removes the retroactive earner at the index of the button that was clicked. */\n    const removeRetroactiveEarner = (idx: number) => {\n        if (retroactiveEarners.length === 1) {\n            alert('You have to put at least one retroactive earner');\n            return false;\n        }\n        setRetroactiveEarners(\n            retroactiveEarners.filter((value, i) => i !== idx)\n        );\n    };\n\n    /**\n     * It creates a new gate.\n     * @param e - React.FormEvent\n     * @returns The `createGate` mutation returns a `Gate` object.\n     */\n    const onSave = async (e: React.FormEvent) => {\n        setUpdateeLoading(true);\n        try {\n            e.preventDefault();\n\n            if (!uploadFile) {\n                alert('Please upload an NFT');\n                return false;\n            }\n\n            const form = new FormData();\n            form.append('file', uploadFile, 'image.png');\n\n            const hash = await uploadFileToIPFS(form);\n            const gateID = uuidv4();\n\n            await createGate({\n                variables: {\n                    input: {\n                        id: gateID,\n                        daoID: daoData.id,\n                        name: title,\n                        description,\n                        categories: categoryList,\n                        admins: adminList.map((admin) => admin.id),\n                        ...(wantPreReqs && { keysNumber: keyRequired }),\n                        nftType: (NFTType as string).toUpperCase(),\n                        ...(skillList.length > 0 && { skills: skillList }),\n                        ...(attitudeList.length > 0 && {\n                            attitudes: attitudeList,\n                        }),\n                        ...(knowledgeList.length > 0 && {\n                            knowledge: knowledgeList,\n                        }),\n                        published: 'NOT_PUBLISHED',\n                        holders: 0,\n                        links: [],\n                        retroactiveEarners,\n                        preRequisites: {\n                            completedGates: prerequisiteList.map(\n                                (prereq) => prereq.id\n                            ),\n                        },\n                        badge: {\n                            name: badgeName,\n                            ipfsURL: hash,\n                        },\n                    },\n                },\n            });\n\n            navigate(`/gate/${gateID}`);\n        } catch (err) {\n            alert('An error occurred. Please try again later!');\n            console.log(err);\n            setUpdateeLoading(false);\n        }\n        setUpdateeLoading(false);\n    };\n\n    /**\n     * It updates the gate.\n     * @param e - The event object.\n     * @returns The return value is the `updateGate` mutation.\n     */\n    const onEdit = async (e) => {\n        setUpdateeLoading(true);\n        e.preventDefault();\n        if (uploadFile && NFTupdated) {\n            try {\n                const form = new FormData();\n                form.append('file', uploadFile, 'image.png');\n                const hash = await uploadFileToIPFS(form);\n\n                await updateGate({\n                    variables: {\n                        input: {\n                            id: gateData.id,\n                            daoID: daoData.id,\n                            name: title,\n                            description,\n                            categories: categoryList,\n                            admins: adminList.map((admin) => admin.id),\n                            keysNumber: keyRequired,\n                            published: gateData.published,\n                            retroactiveEarners,\n                            badge: {\n                                name: badgeName,\n                                ipfsURL: gateData.badge.ipfsURL,\n                            },\n                        },\n                    },\n                });\n                navigate(`/gate/${gateData.id}`);\n            } catch (e) {\n                alert('We are facing issues please try again later');\n                console.log(e);\n            }\n        } else {\n            try {\n                if (!NFTupdated) {\n                    alert('Please Enter the NFT');\n                    return false;\n                }\n\n                await updateGate({\n                    variables: {\n                        input: {\n                            id: gateData.id,\n                            daoID: daoData.id,\n                            name: title,\n                            description,\n                            categories: categoryList,\n                            admins: adminList.map((admin) => admin.id),\n                            keysNumber: keyRequired,\n                            published: gateData.published,\n                            retroactiveEarners,\n                            badge: {\n                                name: badgeName,\n                                ipfsURL: gateData.badge.ipfsURL,\n                            },\n                        },\n                    },\n                });\n                navigate(`/gate/${gateData.id}`);\n            } catch (e) {\n                alert('We are facing issues please try again later');\n                console.log(e);\n            }\n        }\n        setUpdateeLoading(false);\n    };\n\n    useEffect(() => {\n        const clear = setTimeout(() => {\n            searchByUsers();\n        }, 2000);\n\n        return () => clearTimeout(clear);\n    }, [admin]);\n\n    useEffect(() => {\n        if (searchUserCalled && !!searchUserData) {\n            const query = searchUserData.searchUsers.items;\n            const results = query.slice(0, 5).map((user: User) => {\n                return {\n                    name: user.name,\n                    username: user.username,\n                    id: user.id,\n                    pfp: user.pfp,\n                    wallet: user.wallet,\n                };\n            });\n            setAdminSearch(results);\n        }\n    }, [searchUserData]);\n\n    useEffect(() => {\n        const clear = setTimeout(() => {\n            searchByGates();\n        }, 2000);\n\n        return () => clearTimeout(clear);\n    }, [admin]);\n\n    useEffect(() => {\n        if (searchGateCalled && !!searchGateData) {\n            const query = searchGateData.searchGates.items;\n            const results = query.slice(0, 5).map((gate) => {\n                return {\n                    name: gate.name,\n                    id: gate.id,\n                };\n            });\n            setPrereqsSearch(results);\n        }\n    }, [searchGateData]);\n\n    return (\n        <Styled.Page>\n            <Space>\n                <BackButton\n                    url={edit ? `/gate/${gateData.id}` : `/dao/${daoData.dao}`}\n                    style={{\n                        marginTop: '20px',\n                    }}\n                >\n                    Back to Onboarding\n                </BackButton>\n                <Styled.Container onSubmit={edit ? onEdit : onSave}>\n                    <Styled.Header>\n                        {edit ? `Edit Gate` : `Create a New Gate`}\n                    </Styled.Header>\n                    {(!edit ||\n                        gateData?.published ===\n                            PublishedState.NOT_PUBLISHED) && (\n                        <>\n                            <FormStyled.Fieldset>\n                                <FormStyled.Label htmlFor='title'>\n                                    Gate Title*\n                                </FormStyled.Label>\n                                <FormStyled.Input\n                                    onChange={(e) => setTitle(e.target.value)}\n                                    type='text'\n                                    id='title'\n                                    name='title'\n                                    placeholder='This will be the title of your Gate'\n                                    value={title}\n                                    required\n                                />\n                            </FormStyled.Fieldset>\n\n                            <FormStyled.Fieldset>\n                                <FormStyled.Label htmlFor='description'>\n                                    Description*\n                                </FormStyled.Label>\n                                {/* <RichTextEditor value={description} set={setDescription} /> */}\n                                <FormStyled.Textarea\n                                    onChange={(e) =>\n                                        setDescription(e.target.value)\n                                    }\n                                    value={description}\n                                    name='description'\n                                    placeholder='This will be the description of your Gate. We reccommend maximum of 2 lines.'\n                                    required\n                                />\n                            </FormStyled.Fieldset>\n\n                            <FormStyled.Fieldset>\n                                <FormStyled.Label htmlFor='title'>\n                                    Category*\n                                </FormStyled.Label>\n                                <FormStyled.Input\n                                    onChange={(e) =>\n                                        setCategory(e.target.value)\n                                    }\n                                    type='text'\n                                    id='category'\n                                    name='category'\n                                    placeholder='Search Category'\n                                    onKeyPress={addCategories}\n                                    value={category}\n                                />\n\n                                {categoryList.length > 0 && (\n                                    <Styled.CategoryList>\n                                        {categoryList.map((category, id) => {\n                                            return (\n                                                <React.Fragment key={id}>\n                                                    <SearchedItem\n                                                        val={category}\n                                                        id={id}\n                                                        remove={\n                                                            removeCategories\n                                                        }\n                                                    />\n                                                </React.Fragment>\n                                            );\n                                        })}\n                                    </Styled.CategoryList>\n                                )}\n                            </FormStyled.Fieldset>\n\n                            <FormStyled.Fieldset>\n                                <FormStyled.Label>\n                                    Type of NFT*\n                                </FormStyled.Label>\n                                <FormStyled.GridBox\n                                    cols={2}\n                                    onChange={(e) =>\n                                        setNFTType(\n                                            (e.target as HTMLInputElement)\n                                                .value as NFT\n                                        )\n                                    }\n                                >\n                                    <FormStyled.Radio\n                                        id='nft-1'\n                                        name='nft'\n                                        value='Contributor'\n                                        label='Contributor'\n                                        checked={NFTType === 'Contributor'}\n                                    />\n                                    <FormStyled.Radio\n                                        id='nft-2'\n                                        name='nft'\n                                        value='Reward'\n                                        label='Reward'\n                                        checked={NFTType === 'Reward'}\n                                    />\n                                </FormStyled.GridBox>\n                            </FormStyled.Fieldset>\n\n                            <FormStyled.Fieldset>\n                                <FormStyled.Label>\n                                    Would you like to have pre-requisites/keys?\n                                </FormStyled.Label>\n                                <FormStyled.GridBox\n                                    cols={2}\n                                    onChange={(e) =>\n                                        setWantPreReqs(\n                                            (e.target as HTMLInputElement)\n                                                .value as YesNo\n                                        )\n                                    }\n                                >\n                                    <FormStyled.Radio\n                                        id='wantPreReqs-1'\n                                        name='wantPreReqs'\n                                        value='Yes'\n                                        label='Yes'\n                                        checked={wantPreReqs === YesNo.YES}\n                                    />\n                                    <FormStyled.Radio\n                                        id='wantPreReqs-2'\n                                        name='wantPreReqs'\n                                        value='No'\n                                        label='No'\n                                        checked={wantPreReqs === YesNo.NO}\n                                    />\n                                </FormStyled.GridBox>\n                            </FormStyled.Fieldset>\n                        </>\n                    )}\n\n                    {NFTType && wantPreReqs && (\n                        <>\n                            {wantPreReqs === YesNo.YES && (\n                                <FormStyled.Fieldset>\n                                    <FormStyled.Label htmlFor='title'>\n                                        KEYS REQUIRED*\n                                    </FormStyled.Label>\n                                    <Styled.InputSmall\n                                        onChange={(e) =>\n                                            setKeyRequired(e.target.value)\n                                        }\n                                        type='number'\n                                        id='keyReq'\n                                        name='keyReq'\n                                        placeholder='0'\n                                        value={\n                                            keyRequired > 0 ? keyRequired : null\n                                        }\n                                        required\n                                    />\n                                </FormStyled.Fieldset>\n                            )}\n\n                            {(!edit ||\n                                gateData?.published ===\n                                    PublishedState.NOT_PUBLISHED) && (\n                                <>\n                                    {NFTType === 'Reward' && (\n                                        <>\n                                            <FormStyled.Fieldset>\n                                                <FormStyled.Label htmlFor='skills'>\n                                                    Skills\n                                                </FormStyled.Label>\n                                                <FormStyled.Input\n                                                    onChange={(e) =>\n                                                        setSkill(e.target.value)\n                                                    }\n                                                    type='text'\n                                                    id='skills'\n                                                    name='skills'\n                                                    placeholder='Search Skills'\n                                                    onKeyPress={addSkills}\n                                                    value={skill}\n                                                />\n\n                                                {skillList.length > 0 && (\n                                                    <Styled.CategoryList>\n                                                        {skillList.map(\n                                                            (skill, id) => {\n                                                                return (\n                                                                    <SearchedItem\n                                                                        val={\n                                                                            skill\n                                                                        }\n                                                                        id={id}\n                                                                        remove={\n                                                                            removeSkills\n                                                                        }\n                                                                    />\n                                                                );\n                                                            }\n                                                        )}\n                                                    </Styled.CategoryList>\n                                                )}\n                                            </FormStyled.Fieldset>\n\n                                            <FormStyled.Fieldset>\n                                                <FormStyled.Label htmlFor='knowledge'>\n                                                    Knowledge\n                                                </FormStyled.Label>\n                                                <FormStyled.Input\n                                                    onChange={(e) =>\n                                                        setKnowledge(\n                                                            e.target.value\n                                                        )\n                                                    }\n                                                    type='text'\n                                                    id='knowledge'\n                                                    name='knowledge'\n                                                    placeholder='Search Knowledge'\n                                                    onKeyPress={addKnowledge}\n                                                    value={knowledge}\n                                                />\n\n                                                {knowledgeList.length > 0 && (\n                                                    <Styled.CategoryList>\n                                                        {knowledgeList.map(\n                                                            (knowledge, id) => {\n                                                                return (\n                                                                    <SearchedItem\n                                                                        val={\n                                                                            knowledge\n                                                                        }\n                                                                        id={id}\n                                                                        remove={\n                                                                            removeKnowledge\n                                                                        }\n                                                                    />\n                                                                );\n                                                            }\n                                                        )}\n                                                    </Styled.CategoryList>\n                                                )}\n                                            </FormStyled.Fieldset>\n\n                                            <FormStyled.Fieldset>\n                                                <FormStyled.Label htmlFor='attitudes'>\n                                                    Attitudes\n                                                </FormStyled.Label>\n                                                <FormStyled.Input\n                                                    onChange={(e) =>\n                                                        setAttitude(\n                                                            e.target.value\n                                                        )\n                                                    }\n                                                    type='text'\n                                                    id='attitude'\n                                                    name='attitude'\n                                                    placeholder='Search Attitude'\n                                                    onKeyPress={addAttitude}\n                                                    value={attitude}\n                                                />\n\n                                                {attitudeList.length > 0 && (\n                                                    <Styled.CategoryList>\n                                                        {attitudeList.map(\n                                                            (attitude, id) => {\n                                                                return (\n                                                                    <SearchedItem\n                                                                        val={\n                                                                            attitude\n                                                                        }\n                                                                        id={id}\n                                                                        remove={\n                                                                            removeAttitude\n                                                                        }\n                                                                    />\n                                                                );\n                                                            }\n                                                        )}\n                                                    </Styled.CategoryList>\n                                                )}\n                                            </FormStyled.Fieldset>\n                                        </>\n                                    )}\n\n                                    <FormStyled.Fieldset>\n                                        {edit ? (\n                                            <ImageUpload\n                                                htmlFor='ProfileImage'\n                                                label='Upload Badge or NFT*'\n                                                setImage={setUploadFile}\n                                                defaultImageURL={`https://gateway.pinata.cloud/ipfs/${gateData.badge.ipfsURL}`}\n                                            />\n                                        ) : (\n                                            <ImageUpload\n                                                htmlFor='ProfileImage'\n                                                label='Upload Badge or NFT*'\n                                                setImage={setUploadFile}\n                                            />\n                                        )}\n                                        <Styled.AllowedFileType>\n                                            <p>Image files only.</p>\n                                            <p>\n                                                File supported: JPG, PNG, GIF,\n                                                SVG, WEBM\n                                            </p>\n                                            <p>Max size: 100 MB</p>\n                                        </Styled.AllowedFileType>\n                                    </FormStyled.Fieldset>\n\n                                    <FormStyled.Fieldset>\n                                        <FormStyled.Label htmlFor='title'>\n                                            BADGE/NFT Name*\n                                        </FormStyled.Label>\n                                        <FormStyled.Input\n                                            onChange={(e) =>\n                                                setBadgeName(e.target.value)\n                                            }\n                                            type='text'\n                                            id='badgeName'\n                                            name='badgeName'\n                                            placeholder='Insert the name here'\n                                            value={badgeName}\n                                            required\n                                        />\n                                    </FormStyled.Fieldset>\n                                </>\n                            )}\n                            <FormStyled.Fieldset>\n                                <FormStyled.Label htmlFor='title'>\n                                    Admin Privileges*\n                                </FormStyled.Label>\n                                <FormStyled.SearchInput\n                                    onChange={(e) => setAdmin(e.target.value)}\n                                    type='text'\n                                    id='admin'\n                                    name='admin'\n                                    placeholder='Search for admins'\n                                    value={admin}\n                                />\n\n                                {adminList.length > 0 && (\n                                    <Styled.CategoryList>\n                                        {adminList.map((admin) => (\n                                            <SearchedAdmin\n                                                val={admin}\n                                                id={admin.id}\n                                                removeAdmin={removeAdmin}\n                                            />\n                                        ))}\n                                    </Styled.CategoryList>\n                                )}\n\n                                {searchUserLoading ? (\n                                    <Styled.CentralizedLoader>\n                                        <Loader color='white' size={32} />\n                                    </Styled.CentralizedLoader>\n                                ) : (\n                                    admin.length > 0 &&\n                                    adminSearch.length > 0 && (\n                                        <Styled.SearchBox>\n                                            {adminSearch.map((admin) => (\n                                                <SearchRes\n                                                    res={admin}\n                                                    addAdmin={addAdmin}\n                                                />\n                                            ))}\n                                        </Styled.SearchBox>\n                                    )\n                                )}\n                            </FormStyled.Fieldset>\n\n                            {(!edit ||\n                                gateData?.published ===\n                                    PublishedState.NOT_PUBLISHED) && (\n                                <FormStyled.Fieldset>\n                                    <FormStyled.Label htmlFor='retroactiveLearner'>\n                                        {wantPreReqs === YesNo.YES\n                                            ? 'RETROACTIVE'\n                                            : ''}{' '}\n                                        EARNER\n                                    </FormStyled.Label>\n                                    {retroactiveEarners.map(\n                                        (retroactiveEarner, idx) => {\n                                            return (\n                                                <FormStyled.InputWrapper>\n                                                    <FormStyled.Input\n                                                        id={`retroactiveEarners-${idx}`}\n                                                        type='text'\n                                                        value={\n                                                            retroactiveEarner\n                                                        }\n                                                        placeholder='Enter wallet/ens address'\n                                                        onChange={(e) =>\n                                                            updateRetroactiveEarner(\n                                                                e.target.value,\n                                                                idx\n                                                            )\n                                                        }\n                                                        name='retroactiveEarners'\n                                                    />\n                                                    <Styled.IconBox\n                                                        ml='10px'\n                                                        onClick={\n                                                            retroactiveEarners.length >\n                                                            1\n                                                                ? () =>\n                                                                      removeRetroactiveEarner(\n                                                                          idx\n                                                                      )\n                                                                : undefined\n                                                        }\n                                                    >\n                                                        {retroactiveEarners.length >\n                                                        1 ? (\n                                                            <FaTrashAlt\n                                                                style={{\n                                                                    color: 'white',\n                                                                }}\n                                                            />\n                                                        ) : (\n                                                            <FaTrashAlt\n                                                                style={{\n                                                                    color: 'rgba(255,255,255,0.2)',\n                                                                }}\n                                                            />\n                                                        )}\n                                                    </Styled.IconBox>\n                                                </FormStyled.InputWrapper>\n                                            );\n                                        }\n                                    )}\n                                    <FormStyled.IconButton\n                                        onClick={(e) => {\n                                            e.preventDefault();\n                                            setRetroactiveEarners([\n                                                ...retroactiveEarners,\n                                                '',\n                                            ]);\n                                        }}\n                                        style={{\n                                            width: 'fit-content',\n                                            alignSelf: 'center',\n                                        }}\n                                    >\n                                        <FaPlus />\n                                    </FormStyled.IconButton>\n                                </FormStyled.Fieldset>\n                            )}\n\n                            {/*\n                            <FormStyled.Fieldset>\n                                <FormStyled.Label htmlFor='title'>\n                                    Prerequisite\n                                </FormStyled.Label>\n                                <FormStyled.SearchInput\n                                    onChange={(e) =>\n                                        setPrerequisite(e.target.value)\n                                    }\n                                    type='text'\n                                    id='prerequisite'\n                                    name='prerequisite'\n                                    placeholder='Search'\n                                    value={prerequisite}\n                                />\n                                {prerequisiteList.length > 0 && (\n                                    <Styled.CategoryList>\n                                        {prerequisiteList.map(\n                                            (prerequisite) => {\n                                                return (\n                                                    <SearchedItem\n                                                        val={prerequisite.name}\n                                                        id={prerequisite.id}\n                                                        remove={\n                                                            removePrerequisite\n                                                        }\n                                                    />\n                                                );\n                                            }\n                                        )}\n                                    </Styled.CategoryList>\n                                )}\n\n                                {searchGateLoading ? (\n                                    <Styled.CentralizedLoader>\n                                        <Loader color='white' size={32} />\n                                    </Styled.CentralizedLoader>\n                                ) : (\n                                    prereqsSearch.length > 0 &&\n                                    prerequisite.length > 0 && (\n                                        <Styled.SearchBox>\n                                            {prereqsSearch.map((gate) => (\n                                                <SearchResGate\n                                                    gate={gate}\n                                                    addGate={addPrerequisite}\n                                                />\n                                            ))}\n                                        </Styled.SearchBox>\n                                    )\n                                )}\n                            </FormStyled.Fieldset>\n                                            */}\n                                            \n                            <FormStyled.Button type='submit'>\n                                {updateLoading && <Loader color='white' />}\n                                Submit\n                            </FormStyled.Button>\n                        </>\n                    )}\n                </Styled.Container>\n            </Space>\n        </Styled.Page>\n    );\n};\nexport default AddGateForm;\n","import styled from 'styled-components';\nimport { FormStyled } from '../../../../components/Form';\n\nexport const Page = styled.div`\n    // background-color: #170627;\n    min-height: 100vh;\n    // overflow-x: hidden;\n    width: 100%;\n    // display: flex;\n    // justify-content: space-between;\n    // flex-direction: column;\n    background-color: transparent;\n    height: 100%;\n    position: relative;\n\n    overflow: hidden;\n\n    /* &:before {\n        position: absolute;\n        content: '';\n        z-index: -2;\n        background-color: #170627;\n        height: 100%;\n        width: 100%;\n    } */\n`;\n\nexport const Container = styled.form`\n    display: flex;\n    flex: 1;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 0 20%;\n    margin: 50px 0;\n`;\n\nexport const CentralizedLoader = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`;\n\nexport const GridBox = styled.div`\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    grid-column-gap: 10px;\n    grid-row-gap: 30px;\n    margin: 10px 0;\n`;\nexport const description = styled.label`\n    font-family: Poppins;\n    font-style: normal;\n    font-weight: bold;\n    font-size: 13px;\n    line-height: 19px;\n    /* identical to box height */\n\n    letter-spacing: 0.05em;\n    text-transform: uppercase;\n\n    color: #ffffff;\n`;\nexport const Header = styled.h1`\n    font-family: Poppins;\n    font-style: normal;\n    font-weight: bold;\n    font-size: 86px;\n    line-height: 90px;\n    margin-bottom: 40px;\n    /* identical to box height, or 94% */\n    text-align: center;\n    letter-spacing: -0.05em;\n    /* Background */\n    background: linear-gradient(\n        88.04deg,\n        #ee787b 22.54%,\n        #e153f2 41.08%,\n        #495be0 65.25%,\n        #6a39f3 86.1%\n    );\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    -moz-background-clip: text;\n    -moz-text-fill-color: transparent;\n`;\nexport const Label = styled.label`\n    font-family: Poppins;\n    font-style: normal;\n    font-weight: bold;\n    font-size: 13px;\n    line-height: 19px;\n    /* identical to box height */\n\n    letter-spacing: 0.05em;\n    text-transform: uppercase;\n\n    color: #ffffff;\n`;\n\nexport const Button = styled.button`\n    background: #170627;\n    border: 1px solid #a5a5a5;\n    box-sizing: border-box;\n    border-radius: 20px;\n    font-family: Poppins;\n    font-style: normal;\n    font-weight: bold;\n    font-size: 13px;\n    line-height: 19px;\n    /* identical to box height */\n\n    letter-spacing: 0.05em;\n    text-transform: uppercase;\n    padding: 9px 65px;\n    color: #e5e5e5;\n    margin-top: 15px;\n\n    cursor: pointer;\n`;\n\nexport const IconButton = styled(Button)`\n    display: flex;\n    padding: 10px;\n`;\n\nexport const InputSmall = styled(FormStyled.Input)`\n    width: 108px;\n    height: 40px;\n    box-sizing: border-box;\n    border-radius: 5px;\n    padding: 10px;\n    font-family: Be Vietnam;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 12px;\n    line-height: 18px;\n    display: flex;\n    align-items: center;\n    letter-spacing: 0.05em;\n    color: #e5e5e5;\n    margin: 12px 0;\n`;\nexport const AllowedFileType = styled.div`\n    font-family: Be Vietnam;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 12px;\n    line-height: 18px;\n    letter-spacing: 0.05em;\n    text-transform: capitalize;\n\n    color: rgba(229, 229, 229, 0.6);\n`;\n\nexport const Text = styled.p`\n    margin: 50px auto;\n    color: white;\n    font-family: Poppins;\n    font-style: normal;\n`;\nexport const Span = styled.span`\n    color: #fe02b9;\n`;\nexport const Background = styled.div<{ image: string }>`\n    position: relative;\n    width: 337px;\n    height: 256px;\n    margin-top: 10px;\n    background-image: url(${(props) => props.image});\n    background-position: center;\n    background-repeat: no-repeat;\n    background-size: cover;\n    border: 1px solid #7e3bdc;\n    box-sizing: border-box;\n    border-radius: 4px;\n`;\nexport const Cross = styled.div`\n    cursor: pointer;\n    position: absolute;\n    left: 96%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    top: -4%;\n    width: 18px;\n    height: 18px;\n    border-radius: 100%;\n    background: #7e3bdc;\n    border: 1px solid #ffffff;\n    transform: rotate(45deg);\n    z-index: 10;\n    font-weight: 500;\n    color: #ffffff;\n`;\nexport const Image = styled.img`\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    border: 1px solid #7e3bdc;\n    box-sizing: border-box;\n    border-radius: 4px;\n    left: 0;\n    right: 0;\n    z-index: -1;\n`;\nexport const CategoryList = styled.div`\n    margin-top: 15px;\n    display: flex;\n    flex-wrap: wrap;\n    margin-bottom: 15px;\n`;\n\nexport const SearchIconTop = styled.div`\n    width: 17px;\n    height: 17px;\n    border: 2px solid #e5e5e5;\n    box-sizing: border-box;\n`;\nexport const StyledIconBottom = styled.div`\n    position: absolute;\n    width: 6.79px;\n    height: 0px;\n\n    border: 2px solid #e5e5e5;\n    transform: rotate(136.63deg);\n`;\n\nexport const SearchBox = styled.div`\n    position: relative;\n    z-index: 5;\n    background: #220a38;\n    border: 1px solid #7e3bdc;\n    box-sizing: border-box;\n    border-radius: 5px;\n`;\n\ninterface IIconBoxProps {\n    color?: string;\n    border?: string;\n    mr?: string | number;\n    ml?: string | number;\n}\n\nexport const IconBox = styled.div<IIconBoxProps>`\n    color: ${(props) => (props.color ? props.color : `white`)};\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 40px;\n    width: 40px;\n    min-width: 40px;\n    background: #170627;\n    border: 1px solid\n        ${(props) => (props.border ? props.border : `rgba(255, 255, 255, 0.2)`)};\n    border-radius: 5px;\n    margin: 0 auto;\n    margin-right: ${(props) => props.mr};\n    margin-left: ${(props) => props.ml};\n    cursor: pointer;\n`;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n    position: relative;\n    border: 1px solid #e5e5e5;\n    box-sizing: border-box;\n    border-radius: 5px;\n    margin-right: 20px;\n    padding: 10px 30px;\n`;\nexport const Text = styled.div`\n    font-family: Be Vietnam;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 14px;\n    line-height: 20px;\n    display: flex;\n    align-items: center;\n    text-align: center;\n    letter-spacing: 0.05em;\n    text-transform: capitalize;\n    color: #ffffff;\n`;\nexport const Cross = styled.div`\n    cursor: pointer;\n    position: absolute;\n    right: -6px;\n    top: -6px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 18px;\n    height: 18px;\n    border-radius: 100%;\n    background: #7e3bdc;\n    border: 1px solid #ffffff;\n    transform: rotate(45deg);\n    z-index: 10;\n    font-weight: 500;\n    color: #ffffff;\n`;\n","import React from 'react';\nimport * as Styled from './styles';\n\nconst SearchedItem = ({ val, id, remove }) => {\n    return (\n        <Styled.Container>\n            <Styled.Text>{val}</Styled.Text>\n            <Styled.Cross onClick={(e) => remove(id)}>+</Styled.Cross>\n        </Styled.Container>\n    );\n};\n\nexport default SearchedItem;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n    position: relative;\n    border: 1px solid #e5e5e5;\n    box-sizing: border-box;\n    border-radius: 5px;\n    margin-right: 20px;\n    padding: 10px 30px;\n    margin-bottom: 15px;\n    display: flex;\n`;\n\nexport const ProfilePicture = styled.div`\n    width: 30px;\n    height: 30px;\n    background: url(${(props) => props.src || ''});\n    background-size: cover;\n    background-position: center;\n    border-radius: 100%;\n    margin-right: 10px;\n`;\n\nexport const Text = styled.div`\n    font-family: Be Vietnam;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 14px;\n    line-height: 20px;\n    display: flex;\n    align-items: center;\n    text-align: center;\n    letter-spacing: 0.05em;\n    text-transform: capitalize;\n    color: #ffffff;\n`;\n\nexport const Cross = styled.div`\n    cursor: pointer;\n    position: absolute;\n    right: -6px;\n    top: -6px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 18px;\n    height: 18px;\n    border-radius: 100%;\n    background: #7e3bdc;\n    border: 1px solid #ffffff;\n    transform: rotate(45deg);\n    z-index: 10;\n    font-weight: 500;\n    color: #ffffff;\n`;\n","import React from 'react';\nimport * as Styled from './style';\n\nconst SearchedAdmin = ({ val, id, removeAdmin }) => {\n    return (\n        <Styled.Container>\n            <Styled.ProfilePicture src={val.pfp} />\n            <Styled.Text>{val.name}</Styled.Text>\n            <Styled.Cross onClick={(e) => removeAdmin(id)}>+</Styled.Cross>\n        </Styled.Container>\n    );\n};\n\nexport default SearchedAdmin;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n    display: flex;\n    align-items: center;\n    margin: 20px 15px;\n    cursor: pointer;\n`;\n\nexport const ProfilePicture = styled.div`\n    width: 30px;\n    height: 30px;\n    background: url(${(props) => props.src || ''});\n    background-size: cover;\n    background-position: center;\n    border-radius: 100%;\n    margin-right: 10px;\n`;\n\nexport const Name = styled.p`\n    font-family: Be Vietnam;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 16px;\n    line-height: 23px;\n    display: flex;\n    align-items: center;\n\n    color: #e5e5e5;\n`;\n\nexport const Username = styled(Name)`\n    color: purple;\n`;\n","import * as Styled from './style';\n\nconst SearchRes = ({ res, addAdmin }) => (\n    <Styled.Container onClick={(e) => addAdmin(res)}>\n        <Styled.ProfilePicture src={res.pfp} />\n        <Styled.Name>{res.name}</Styled.Name>\n    </Styled.Container>\n);\n\nexport default SearchRes;\n","import axios from 'axios';\n\nconst PINATA = {\n    key: 'fc6144cc69bc1f4061b5',\n    secret: 'f83edb3f5ac9cfff930880678ac72764af712779ce4ea8960883bb9f3dd95a99',\n};\n\nexport const uploadFileToIPFS = async (form) => {\n    const res = await axios.post(\n        'https://api.pinata.cloud/pinning/pinFileToIPFS/',\n        form,\n        {\n            headers: {\n                //'Content-Type': `multipart/form-data; boundary=${form._boundary}`,\n                pinata_api_key: PINATA.key,\n                pinata_secret_api_key: PINATA.secret,\n            },\n        }\n    );\n\n    return res.data.IpfsHash;\n};\n\nexport const uploadMetadataToIPFS = async (obj) => {\n    const res = await axios.post(\n        'https://api.pinata.cloud/pinning/pinJSONToIPFS/',\n        obj,\n        {\n            headers: {\n                //'Content-Type': `multipart/form-data; boundary=${form._boundary}`,\n                pinata_api_key: PINATA.key,\n                pinata_secret_api_key: PINATA.secret,\n            },\n        }\n    );\n\n    return res.data.IpfsHash;\n};\n","import { useMemo } from 'react';\nimport { useMutation, gql } from '@apollo/client';\nimport { createGate as GATE_CREATE } from '../../graphql/mutations';\n\nexport const useCreateGate = () => {\n    const [createGate, { loading, called, data, error }] = useMutation(\n        gql(GATE_CREATE)\n    );\n\n    return useMemo(\n        () => ({\n            createGate,\n            data,\n            error,\n            loading,\n        }),\n        [called, createGate, loading, GATE_CREATE, error]\n    );\n};\n"],"sourceRoot":""}