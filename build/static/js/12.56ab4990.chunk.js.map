{"version":3,"sources":["pages/Gate/pages/AddNewKey/style.tsx","pages/Gate/pages/AddNewKey/index.tsx"],"names":["Container","styled","main","AddNewKey","edit","state","useLocation","gateData","useOutletContext","useState","createdKey","setCreatedKey","changeKey","mutation","setMutation","text","url","id","backButton","setBackButton","values","validator","setValidator","type","useMutation","gql","pushToDB","loading","taskDBInput","formik","taskLink","title","quiz","description","questions","passedAt","Math","floor","length","percentage","code","caseSensitive","chainID","address","amount","chain","methodName","snapshotType","govActive","toUpperCase","spaceID","proposal","useFormik","initialValues","data","task","toLowerCase","replace","titleDescriptionPair","information","map","pair","keysRewarded","keys","peopleLimit","unlimited","question","options","answer","correct","nrOfCorrectAnswers","validate","onSubmit","a","console","log","variables","input","uuidv4","gateID","token","tokenAmount","JSON","stringify","useEffect","createSelfVerify","createQuiz","createMeetingCode","createTokenHold","createContractInteraction","createSnapshotGovernance","createManualTask","switchTask","Space","gate","BackButton","context"],"mappings":"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","file":"static/js/12.56ab4990.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.main`\n    margin: 20px 0;\n`;\n","import React, { useEffect, useState } from 'react';\nimport BackButton from '../../../../components/BackButton';\nimport { Outlet, useLocation, useOutletContext } from 'react-router-dom';\nimport * as Styled from './style';\nimport { useFormik } from 'formik';\nimport { gql, useMutation } from '@apollo/client';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Gate } from '../../../../graphql/API';\nimport {\n    changeKey,\n    createContractInteraction,\n    createManualTask,\n    createMeetingCode,\n    createQuiz,\n    createSelfVerify,\n    createSnapshotGovernance,\n    createTokenHold,\n} from '../../../../graphql/mutations';\nimport KeySuccess from './pages/AddKeySuccess';\nimport Space from '../../../../components/Space';\n\n/**\n * It renders the Outlet component with the gateData context.\n * @returns The `AddNewKey` component is being returned.\n */\nconst AddNewKey = ({ edit = false }) => {\n    const { state }: Record<string, any> = useLocation();\n    const { gateData }: { gateData: Gate } = useOutletContext();\n\n    // State\n    const [createdKey, setCreatedKey] = useState(false);\n    const [mutation, setMutation] = useState(changeKey);\n    const [backButton, setBackButton] = useState({\n        text: 'Gate',\n        url: `/gate/${gateData.id}`,\n    });\n    const [validator, setValidator] = useState(() => (values) => null);\n    const [input, setInput] = useState<Record<string, any>>({\n        type: 'SELF_VERIFY',\n    });\n\n    const [pushToDB, { loading }] = useMutation(gql(mutation));\n\n    const taskDBInput = () => {\n        switch (formik.values.taskLink) {\n            case 'self-verify':\n                return {\n                    type: 'SELF_VERIFY',\n                };\n            case 'quiz':\n                return {\n                    type: 'QUIZ',\n                    title: formik.values.quiz.title,\n                    description: formik.values.quiz.description,\n                    questions: formik.values.quiz.questions,\n                    passedAt: Math.floor(\n                        formik.values.quiz.questions.length *\n                            formik.values.quiz.percentage\n                    ),\n                };\n            case 'meeting-code':\n                return {\n                    type: 'MEETING_CODE',\n                    code: formik.values.code,\n                    caseSensitive: true,\n                };\n            case 'token':\n                return {\n                    type: 'TOKEN_HOLD',\n                    chainID: 1,\n                    address: formik.values.address,\n                    amount: formik.values.amount,\n                };\n            case 'sc-interaction':\n                return {\n                    type: 'CONTRACT_INTERACTION',\n                    chainID: formik.values.chain,\n                    address: formik.values.address,\n                    methodName: formik.values.methodName || '',\n                };\n            case 'governance':\n                return {\n                    type: 'SNAPSHOT_GOVERNANCE',\n                    snapshotType: formik.values.govActive.toUpperCase(),\n                    spaceID: formik.values.spaceID,\n                    proposal: formik.values.proposal,\n                };\n            case 'manual':\n                return {\n                    type: 'MANUAL',\n                };\n            default:\n                return { type: '' };\n        }\n    };\n\n    const validate = (values) => {\n        // eslint-disable-next-line prefer-const\n        let errors = {\n            ...validator(values),\n        };\n\n        return errors;\n    };\n\n    // Formik\n    const formik = useFormik({\n        initialValues: {\n            taskLink: state\n                ? state.data.task.type.toLowerCase().replace(/_/g, '-')\n                : '',\n            titleDescriptionPair: state\n                ? state.data.information.map((pair) => ({\n                      title: pair.title,\n                      description: pair.description,\n                  }))\n                : [\n                      {\n                          title: '',\n                          description: '',\n                      },\n                  ],\n            keysRewarded: state ? state.data.keys : 0,\n            peopleLimit: state ? state.data.peopleLimit : 0,\n            unlimited: state ? state.data.unlimited : false,\n            chain: state ? state.data.task.chain : 1,\n            address: state ? state.data.task.address : '',\n            amount: state ? state.data.task.amount : 0,\n            code: state ? state.data.task.code : '',\n            methodName: state ? state.data.task.methodName : '',\n            govActive: state ? state.data.task.snapshotType : '',\n            spaceID: state ? state.data.task.spaceID : '',\n            proposal: state ? state.data.task.proposal : '',\n            quiz: {\n                title: state ? state.data.task.title : '',\n                description: state ? state.data.task.description : '',\n                percentage: state ? state.data.task : 0,\n                questions: state\n                    ? state.data.task.questions\n                    : [\n                          {\n                              question: '',\n                              options: [\n                                  {\n                                      answer: '',\n                                      correct: false,\n                                  },\n                                  {\n                                      answer: '',\n                                      correct: false,\n                                  },\n                              ],\n                              nrOfCorrectAnswers: 0,\n                          },\n                      ],\n            },\n        },\n        validate,\n        onSubmit: async (values) => {\n            try {\n                console.log(mutation);\n                console.log(taskDBInput());\n                await pushToDB({\n                    variables: {\n                        input: {\n                            id: uuidv4(),\n                            gateID: gateData.id,\n                            information: values.titleDescriptionPair,\n                            token: '',\n                            tokenAmount: 0,\n                            keys: values.keysRewarded,\n                            peopleLimit: values.peopleLimit,\n                            unlimited: values.unlimited,\n                            task: edit\n                                ? JSON.stringify(taskDBInput())\n                                : taskDBInput(),\n                        },\n                    },\n                });\n\n                setCreatedKey(true);\n            } catch (err) {\n                console.log(err);\n            }\n        },\n    });\n\n    useEffect(() => {\n        const switchTask = () => {\n            switch (formik.values.taskLink) {\n                case 'self-verify':\n                    return createSelfVerify;\n                case 'quiz':\n                    return createQuiz;\n                case 'meeting-code':\n                    return createMeetingCode;\n                case 'token':\n                    return createTokenHold;\n                case 'sc-interaction':\n                    return createContractInteraction;\n                case 'governance':\n                    return createSnapshotGovernance;\n                case 'manual':\n                    return createManualTask;\n                default:\n                    return mutation;\n            }\n        };\n\n        setMutation(state ? changeKey : switchTask());\n    }, [formik.values.taskLink]);\n\n    return (\n        <Styled.Container>\n            <Space>\n                {createdKey ? (\n                    <KeySuccess edit={!!state} gate={gateData.id} />\n                ) : (\n                    <>\n                        <BackButton url={backButton.url}>\n                            Back to {backButton.text}\n                        </BackButton>\n                        <Outlet\n                            context={{\n                                gateData,\n                                formik,\n                                edit: !!state || edit,\n                                loading,\n                                setBackButton,\n                                setValidator,\n                                state,\n                            }}\n                        />\n                    </>\n                )}\n            </Space>\n        </Styled.Container>\n    );\n};\n\nexport default AddNewKey;\n"],"sourceRoot":""}