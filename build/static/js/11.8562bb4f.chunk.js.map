{"version":3,"sources":["pages/Gate/pages/AddLinks/style.tsx","pages/Gate/pages/AddLinks/index.tsx"],"names":["Container","styled","div","HeadingContainer","h1","LinksContainer","LinksHeader","LinksElements","TrashContainer","AddContainer","LinksPage","edit","gateData","useOutletContext","useState","links","map","link","name","setLinks","useMutation","gql","updateGate","update","loading","navigate","useNavigate","onSubmit","e","a","preventDefault","variables","input","id","normalizeUrl","forceHttps","alert","BackButton","Form","FormBox","Label","idx","Input","placeholder","onChange","value","prev","obj","jdx","changeName","target","changeLink","onClick","filter","color","style","cursor","Button","Loader"],"mappings":"uLAEaA,EAAYC,IAAOC,IAAV,iDAITC,EAAmBF,IAAOG,GAAV,mjBAwBhBC,EAAiBJ,IAAOC,IAAV,8HAOdI,EAAcL,IAAOC,IAAV,yJAQXK,EAAgBN,IAAOC,IAAV,uIA4BbM,GArBgBP,IAAOC,IAAV,4dAqBID,IAAOC,IAAV,oJAQdO,EAAeR,IAAOC,IAAV,+I,0FCuGVQ,UAnJqB,SAAC,GAAsB,IAAD,IAAnBC,YAAmB,SAE9CC,EAAqCC,cAArCD,SACR,EAA0BE,mBACtBH,EACMC,EAASG,MAAMC,KAAI,SAACC,GAAD,MAAW,CAC1BC,KAAMD,EAAKC,KACXD,KAAMA,EAAKA,SAEf,CACI,CACIC,KAAM,GACND,KAAM,MATxB,mBAAOF,EAAP,KAAcI,EAAd,KAeA,EAA8BC,YAAYC,YAAIC,MAA9C,mBAAOC,EAAP,KAAiBC,EAAjB,KAAiBA,QACXC,EAAWC,cA0CXC,EAAQ,uCAAG,WAAOC,GAAP,SAAAC,EAAA,6DACbD,EAAEE,iBADW,kBAIHP,EAAO,CACTQ,UAAW,CACPC,MAAO,CACHC,GAAIrB,EAASqB,GACblB,MAAOA,EAAMC,KAAI,SAACC,GAAD,MAAW,CACxBC,KAAMD,EAAKC,KACXD,KAAMiB,YAAajB,EAAKA,KAAM,CAAEkB,YAAY,YAVnD,OAgBTV,EAAS,MAhBA,gDAkBTW,MAAM,8CAlBG,yDAAH,sDAsBd,OACI,eAAC,EAAD,WACI,cAACC,EAAA,EAAD,2BACA,eAACC,EAAA,EAAWC,QAAZ,CAAoBZ,SAAUA,EAA9B,UACI,eAAC,EAAD,WACKhB,EAAO,OAAS,MADrB,YAGA,eAAC,EAAD,WACI,eAAC,EAAD,WACI,cAAC2B,EAAA,EAAWE,MAAZ,mBACA,cAACF,EAAA,EAAWE,MAAZ,sBAEHzB,EAAMC,KAAI,SAACC,EAAMwB,GAAP,OACP,eAAC,EAAD,WACI,cAACH,EAAA,EAAWI,MAAZ,CACIC,YAAY,YACZC,SAAU,SAAChB,GAAD,OApDnB,SAACiB,EAAeJ,GAAhB,OACftB,GAAS,SAAC2B,GAAD,OACLA,EAAK9B,KAAI,SAAC+B,EAAKC,GACX,OAAIA,GAAOP,EACA,CACHvB,KAAM2B,EACN5B,KAAM8B,EAAI9B,MAIX8B,QA2CaE,CAAWrB,EAAEsB,OAAOL,MAAOJ,IAE/BI,MAAO5B,EAAKC,OAEhB,cAACoB,EAAA,EAAWI,MAAZ,CACIC,YAAY,WACZC,SAAU,SAAChB,GAAD,OA/EnB,SAACiB,EAAeJ,GAAhB,OACftB,GAAS,SAAC2B,GAAD,OACLA,EAAK9B,KAAI,SAAC+B,EAAKC,GACX,OAAIA,GAAOP,EACA,CACHvB,KAAM6B,EAAI7B,KACVD,KAAM4B,GAIPE,QAsEaI,CAAWvB,EAAEsB,OAAOL,MAAOJ,IAE/BI,MAAO5B,EAAKA,OAEhB,cAAC,EAAD,UACI,cAAC,IAAD,CACImC,QAAS,SAACxB,GAAD,OACLT,GAAS,SAAC2B,GAAD,OACLA,EAAKO,QACD,SAACN,EAAKC,GAAN,OAAcA,IAAQP,sBAStD,cAAC,EAAD,UACI,cAAC,IAAD,CACIa,MAAM,QACNC,MAAO,CACHC,OAAQ,WAEZJ,QAAS,kBACLjC,GAAS,SAAC2B,GAAD,4BACFA,GADE,CAEL,CAAE5B,KAAM,GAAID,KAAM,cAKlC,eAACqB,EAAA,EAAWmB,OAAZ,WACKjC,GAAW,cAACkC,EAAA,EAAD,CAAQJ,MAAM,UAD9B","file":"static/js/11.8562bb4f.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n    margin: 20px 0;\n`;\n\nexport const HeadingContainer = styled.h1`\n    font-family: Poppins;\n    font-style: normal;\n    font-weight: bold;\n    font-size: 96px;\n    line-height: 90px;\n    /* identical to box height, or 94% */\n\n    text-align: center;\n    letter-spacing: -0.05em;\n\n    background: linear-gradient(\n        88.04deg,\n        #ee787b 22.54%,\n        #e153f2 41.08%,\n        #495be0 65.25%,\n        #6a39f3 86.1%\n    );\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    -moz-background-clip: text;\n    -moz-text-fill-color: transparent;\n`;\n\nexport const LinksContainer = styled.div`\n    margin-top: 60px;\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n`;\n\nexport const LinksHeader = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 2fr 0.5fr;\n    margin-top: 10px;\n    grid-gap: 10px;\n    width: 100%;\n`;\n\nexport const LinksElements = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 2fr 0.5fr;\n    margin-top: 10px;\n    grid-gap: 10px;\n`;\n\nexport const NameContainer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 122px;\n    height: 40px;\n    border: 1px solid rgba(255, 255, 255, 0.2);\n    box-sizing: border-box;\n    border-radius: 5px;\n\n    font-family: Be Vietnam;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 14px;\n    line-height: 20px;\n    letter-spacing: 0.05em;\n    text-transform: capitalize;\n\n    color: rgba(255, 255, 255, 0.6);\n`;\n\nexport const TrashContainer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: flex-start;\n    padding: 10px;\n    color: white;\n`;\n\nexport const AddContainer = styled.div`\n    width: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin: 20px 0;\n`;\n","import * as Styled from './style';\nimport BackButton from '../../../../components/BackButton';\nimport { FormStyled } from '../../../../components/Form';\nimport { FaPlus, FaTrashAlt } from 'react-icons/fa';\nimport React, { useState } from 'react';\nimport { gql, useMutation } from '@apollo/client';\nimport { updateGate } from '../../../../graphql/mutations';\nimport { useNavigate, useOutletContext } from 'react-router-dom';\nimport { Gate, TaskStatus } from '../../../../graphql/API';\nimport normalizeUrl from 'normalize-url';\nimport Loader from '../../../../components/Loader';\n\n/* This is a type definition for the Link interface. It is used to make sure that the data that is\npassed to the component is of the correct type. */\ninterface Link {\n    name: string;\n    link: string;\n}\n\n/* This is a type definition for the GateData interface. It is used to make sure that the data that is\npassed to the component is of the correct type. */\ninterface GateData extends Gate {\n    holders: number;\n    keysDone: number;\n    keysNumber: number;\n    taskStatus: TaskStatus[];\n}\n\ninterface IProps {\n    edit?: boolean;\n}\n\n/**\n * This function is responsible for adding links to the website\n * @returns The return is a styled container with a box inside it. The box contains a heading\n * container, a links container and a save button.\n */\nconst LinksPage: React.FC<IProps> = ({ edit = false }) => {\n    // State\n    const { gateData }: { gateData: GateData } = useOutletContext();\n    const [links, setLinks] = useState<Link[]>(\n        edit\n            ? gateData.links.map((link) => ({\n                  name: link.name,\n                  link: link.link,\n              }))\n            : [\n                  {\n                      name: '',\n                      link: '',\n                  },\n              ]\n    );\n\n    // Hooks\n    const [update, { loading }] = useMutation(gql(updateGate));\n    const navigate = useNavigate();\n\n    /**\n     * It takes a value and an index and sets the link property of the object at that index to the\n     * value.\n     * @param {string} value - The value of the input field.\n     * @param {number} idx - the index of the link that is being changed.\n     */\n    const changeLink = (value: string, idx: number): void =>\n        setLinks((prev) =>\n            prev.map((obj, jdx) => {\n                if (jdx == idx) {\n                    return {\n                        name: obj.name,\n                        link: value,\n                    };\n                }\n\n                return obj;\n            })\n        );\n\n    /**\n     * It takes in a string and an index and returns a new array with the name changed at the specified\n     * index.\n     * @param {string} value - The value of the input field.\n     * @param {number} idx - the index of the link that we want to change.\n     */\n    const changeName = (value: string, idx: number): void =>\n        setLinks((prev) =>\n            prev.map((obj, jdx) => {\n                if (jdx == idx) {\n                    return {\n                        name: value,\n                        link: obj.link,\n                    };\n                }\n\n                return obj;\n            })\n        );\n\n    const onSubmit = async (e: React.FormEvent) => {\n        e.preventDefault();\n\n        try {\n            await update({\n                variables: {\n                    input: {\n                        id: gateData.id,\n                        links: links.map((link) => ({\n                            name: link.name,\n                            link: normalizeUrl(link.link, { forceHttps: true }),\n                        })),\n                    },\n                },\n            });\n\n            navigate('..');\n        } catch (err) {\n            alert('An error occurred, please try again later!');\n        }\n    };\n\n    return (\n        <Styled.Container>\n            <BackButton>Back to Gate</BackButton>\n            <FormStyled.FormBox onSubmit={onSubmit}>\n                <Styled.HeadingContainer>\n                    {edit ? 'Edit' : 'Add'} Links\n                </Styled.HeadingContainer>\n                <Styled.LinksContainer>\n                    <Styled.LinksHeader>\n                        <FormStyled.Label>Name</FormStyled.Label>\n                        <FormStyled.Label>Link</FormStyled.Label>\n                    </Styled.LinksHeader>\n                    {links.map((link, idx) => (\n                        <Styled.LinksElements>\n                            <FormStyled.Input\n                                placeholder='Link Name'\n                                onChange={(e) =>\n                                    changeName(e.target.value, idx)\n                                }\n                                value={link.name}\n                            />\n                            <FormStyled.Input\n                                placeholder='Link URL'\n                                onChange={(e) =>\n                                    changeLink(e.target.value, idx)\n                                }\n                                value={link.link}\n                            />\n                            <Styled.TrashContainer>\n                                <FaTrashAlt\n                                    onClick={(e) =>\n                                        setLinks((prev) =>\n                                            prev.filter(\n                                                (obj, jdx) => jdx !== idx\n                                            )\n                                        )\n                                    }\n                                />\n                            </Styled.TrashContainer>\n                        </Styled.LinksElements>\n                    ))}\n                </Styled.LinksContainer>\n                <Styled.AddContainer>\n                    <FaPlus\n                        color='white'\n                        style={{\n                            cursor: 'pointer',\n                        }}\n                        onClick={() =>\n                            setLinks((prev) => [\n                                ...prev,\n                                { name: '', link: '' },\n                            ])\n                        }\n                    />\n                </Styled.AddContainer>\n                <FormStyled.Button>\n                    {loading && <Loader color='white' />} SAVE\n                </FormStyled.Button>\n            </FormStyled.FormBox>\n        </Styled.Container>\n    );\n};\n\nexport default LinksPage;\n"],"sourceRoot":""}