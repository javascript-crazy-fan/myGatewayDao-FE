{"version":3,"sources":["api/coingecko.js","pages/DAO/index.jsx"],"names":["getTokenFromAddress","address","a","fetch","res","json","DAO","props","id","useParams","useState","tokenAddress","socials","categories","bounties","description","howToJoin","tags","tokenBenefits","whitelistedAddresses","daoData","setDaoData","useQuery","gql","getDaoById","variables","dao","dbData","data","loading","error","called","loaded","setLoaded","getCGData","useEffect","fetchTokenInfo","cgData","tokenData","market_data","symbol","ranking","market_cap_rank","tokenFeed","price","current_price","usd","ath","atl","marketCap","market_cap","change24h","price_change_percentage_24h","change7d","price_change_percentage_7d","totalSupply","total_supply","circulatingSupply","circulating_supply","showTokenFeed","handleData","catch","e","console","log","getDAOById","items","to","Page","context"],"mappings":"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","file":"static/js/9.69935f22.chunk.js","sourcesContent":["/**\n * Gets token data from CoinGecko\n *\n * @param {string} address\n * @returns {JSON} token\n */\nexport const getTokenFromAddress = async (address) => {\n    const res = await fetch(\n        `https://api.coingecko.com/api/v3/coins/ethereum/contract/${address}`\n    );\n    const json = await res.json();\n\n    return json;\n};\n","import { useParams, Navigate, Outlet } from 'react-router-dom';\n\n// import { useGetDAOByID } from '../../api/database/useGetDAO';\n\n// Components\nimport Page from '../../components/Page';\nimport { useState, useEffect } from 'react';\nimport { getTokenFromAddress } from '../../api/coingecko';\nimport React from 'react';\nimport { gql, useQuery } from '@apollo/client';\nimport { getDaoById } from '../../graphql/queries';\n\n// AWS\n/*\nimport { API, graphqlOperation } from 'aws-amplify';\nimport { gql } from '@apollo/client';\nimport { onUpdateDao } from '../../graphql/subscriptions';\n*/\n\n/**\n * It fetches data from the DAO's GraphQL API and renders the appropriate page\n * @param props - The props passed to the component.\n * @returns The `Outlet` component is being returned.\n */\nconst DAO = (props) => {\n    const { id } = useParams();\n    const [daoData, setDaoData] = useState({\n        tokenAddress: '',\n        socials: {},\n        categories: [],\n        bounties: [],\n        description: '',\n        howToJoin: [],\n        tags: [],\n        tokenBenefits: [],\n        whitelistedAddresses: [],\n    });\n    const {\n        data: dbData,\n        loading,\n        error,\n        called,\n    } = useQuery(gql(getDaoById), {\n        variables: {\n            dao: id,\n        },\n    });\n    const [loaded, setLoaded] = useState(false);\n\n    // Get CoinGecko data\n    const getCGData = async (address) => await getTokenFromAddress(address);\n\n    // In case the DAO's token address gets changed\n    useEffect(() => {\n        const fetchTokenInfo = async () => {\n            const cgData = daoData?.tokenAddress\n                ? await getCGData(daoData?.tokenAddress)\n                : {};\n\n            const tokenData =\n                daoData.tokenAddress && cgData.market_data\n                    ? {\n                          symbol: cgData.symbol,\n                          ranking: cgData.market_cap_rank,\n                          tokenFeed: {\n                              price: cgData.market_data.current_price.usd,\n                              ath: cgData.market_data.ath.usd,\n                              atl: cgData.market_data.atl.usd,\n                              marketCap: cgData.market_data.market_cap.usd,\n                              change24h:\n                                  cgData.market_data\n                                      .price_change_percentage_24h,\n                              change7d:\n                                  cgData.market_data.price_change_percentage_7d,\n                              totalSupply: cgData.market_data.total_supply,\n                              circulatingSupply:\n                                  cgData.market_data.circulating_supply,\n                          },\n                          showTokenFeed: true,\n                      }\n                    : {\n                          showTokenFeed: false,\n                      };\n\n            setDaoData({ ...daoData, ...tokenData });\n        };\n\n        daoData && daoData.tokenAddress && fetchTokenInfo();\n    }, [daoData.tokenAddress]);\n\n    // Fetch data regarding these\n    useEffect(() => {\n        const handleData = async () => {\n            if (daoData && !loading && !error) {\n                const cgData = dbData.tokenAddress\n                    ? await getCGData(dbData.tokenAddress).catch((e) => {\n                          console.log(e);\n                      })\n                    : {};\n\n                const tokenData =\n                    dbData.getDAOById.items[0].tokenAddress && cgData.symbol\n                        ? {\n                              symbol: cgData.symbol,\n                              ranking: cgData.market_cap_rank,\n                              tokenFeed: {\n                                  price: cgData.market_data.current_price.usd,\n                                  ath: cgData.market_data.ath.usd,\n                                  atl: cgData.market_data.atl.usd,\n                                  marketCap: cgData.market_data.market_cap.usd,\n                                  change24h:\n                                      cgData.market_data\n                                          .price_change_percentage_24h,\n                                  change7d:\n                                      cgData.market_data\n                                          .price_change_percentage_7d,\n                                  totalSupply: cgData.market_data.total_supply,\n                                  circulatingSupply:\n                                      cgData.market_data.circulating_supply,\n                              },\n                              showTokenFeed: true,\n                          }\n                        : {\n                              showTokenFeed: false,\n                          };\n\n                // Organize presentable data\n                const data = {\n                    ...dbData.getDAOById.items[0],\n                    ...tokenData,\n                };\n\n                setDaoData(data);\n                setLoaded(true);\n            }\n        };\n\n        handleData();\n    }, [id, loading]);\n\n    useEffect(() => {\n        called &&\n            dbData &&\n            setDaoData({\n                ...daoData,\n                ...dbData.getDAOById.items[0],\n            });\n    }, [dbData, called]);\n\n    /*\n    useEffect(() => {\n        const subscription = API.graphql(\n            graphqlOperation(gql(onUpdateDao))\n        ).subscribe({\n            next: (data) => {\n                let dao = data.value.data.onUpdateDAO;\n                console.log('New thing');\n                console.log(dao);\n\n                if (dao.id === daoData.id) {\n                    console.log('onUpdateDao');\n                    setDaoData({ ...daoData, ...dao });\n                }\n            },\n        });\n\n        return () => subscription.unsubscribe();\n    });\n    */\n\n    if (error) {\n        console.error(error);\n        return <Navigate to='/404' />;\n    }\n\n    return (\n        <Page>\n            <Outlet\n                context={{\n                    daoData,\n                    setDaoData,\n                    loaded,\n                    loading,\n                }}\n            />\n        </Page>\n    );\n};\n\nexport default DAO;\n"],"sourceRoot":""}