{"version":3,"sources":["pages/Quiz/style.tsx","pages/Quiz/Component/CreateQuestion/style.jsx","pages/Quiz/Component/CreateQuestion/index.jsx","pages/Quiz/Component/Home/index.jsx","pages/Quiz/Component/Persentage/index.jsx","pages/Quiz/index.tsx"],"names":["Container","styled","canvas","div","AnswerBox","IconBox","props","color","border","mr","ml","AnswerInput","FormStyled","Input","AddQuestionBox","Circle","AddOptionText","CreateQuestion","setActiveModal","setShowMessage","setOptionsPerQuestion","initialClont","formik","useOutletContext","useState","optionCount","setOptionCount","values","quiz","questions","question","options","answer","correct","nrOfCorrectAnswers","setQuestions","addOption","index","addingOption","map","value","idx","push","checkToggle","Form","Fieldset","Label","onChange","e","changeValue","target","helper","editQuestion","type","id","name","placeholder","required","ele","event","optionIndex","changedValue","arr","op","i","editOption","onClick","questionNumber","optionNumber","add","at","console","log","addCorrectAnswer","length","del","splice","alert","deleteOption","undefined","style","DeleteWrapper","filter","v","IconButton","TextLabel","marginLeft","Button","setFieldValue","Home","title","setTitle","description","setDescription","htmlFor","Textarea","height","Percentage","GridBox","cols","parseFloat","Radio","label","checked","percentage","isSubmitting","Loader","CreateQuiz","edit","setBackButton","loading","setValidator","setMessage","activeModal","optionsPerQuestion","ActiveModal","validate","a","errors","forEach","useEffect","space","window","innerHeight","innerWidth","url","text","FormBox","onSubmit","handleSubmit","H1"],"mappings":"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","file":"static/js/13.37f089d3.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const SpaceBox = styled.canvas`\n    position: absolute;\n    top: 90px;\n    z-index: -1;\n    left: 0;\n    width: 100%;\n`;\nexport const Container = styled.div`\n    position: relarive;\n    width: 100%;\n    display: flex;\n    align-self: flex-start;\n    align-items: center;\n    flex-direction: column;\n`;\nexport const ErrorMessage = styled.div`\n    position: absolute;\n    top: 8%;\n    min-width: 300px;\n    min-height: 60px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background: #220a38;\n    border: 1px solid #7e3bdc;\n    box-sizing: border-box;\n    border-radius: 5px;\n    font-family: Be Vietnam;\n    // padding: 10px;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 12px;\n    letter-spacing: 0.05em;\n    color: #ffffff;\n`;\n","import styled from 'styled-components';\nimport { FormStyled } from '../../../../components/Form';\n\nexport const AnswerBox = styled.div`\n    display: flex;\n    margin: 10px 0;\n`;\n\nexport const IconBox = styled.div`\n    color: ${(props) => (props.color ? props.color : `white`)};\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 40px;\n    width: 40px;\n    min-width: 40px;\n    background: #170627;\n    border: 1px solid\n        ${(props) => (props.border ? props.border : `rgba(255, 255, 255, 0.2)`)};\n    border-radius: 5px;\n    margin: 0 auto;\n    margin-right: ${(props) => props.mr};\n    margin-left: ${(props) => props.ml};\n    cursor: pointer;\n`;\n\nexport const AnswerInput = styled(FormStyled.Input)`\n    box-sizing: border-box;\n    border-radius: 5px;\n    font-family: Be Vietnam;\n    padding: 10px;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 12px;\n    display: flex;\n    align-items: center;\n    letter-spacing: 0.05em;\n    color: #e5e5e5;\n    width: 100%;\n    height: 40px;\n    margin: 0;\n`;\n\nexport const AddQuestionBox = styled.div`\n    display: flex;\n    font-family: Be Vietnam;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 16px;\n    color: #e5e5e5;\n    display: flex;\n    align-items: center;\n    justify-content: left;\n\n    margin-top: 10px;\n    margin-bottom: 50px;\n`;\n\nexport const Circle = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: white;\n    background: #170627;\n    border: 1px solid #a5a5a5;\n    box-sizing: border-box;\n    border-radius: 100%;\n    height: 40px;\n    width: 40px;\n    margin-right: 10px;\n    cursor: pointer;\n`;\n\nexport const AddOptionText = styled.div`\n    width: 100%;\n    height: 40px;\n    display: flex;\n    align-items: center;\n    color: #e5e5e5;\n    padding: 10px;\n    font-family: Be Vietnam;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 16px;\n    line-height: 26px;\n    background: #170627;\n    border: 1px solid #a5a5a5;\n    box-sizing: border-box;\n    border-radius: 5px;\n    cursor: pointer;\n`;\n","import { useState } from 'react';\n\n// Styling\nimport * as Styled from './style';\nimport { FormStyled } from '../../../../components/Form';\n\n// Icons\nimport { BsThreeDotsVertical } from 'react-icons/bs';\nimport { AiOutlineCheck } from 'react-icons/ai';\nimport { FaTrashAlt } from 'react-icons/fa';\nimport { IoMdAdd } from 'react-icons/io';\nimport { useOutletContext } from 'react-router-dom';\n\nconst CreateQuestion = ({\n    setActiveModal,\n    setShowMessage,\n    setOptionsPerQuestion,\n    initialClont,\n}) => {\n    const { formik } = useOutletContext();\n\n    const [optionCount, setOptionCount] = useState(initialClont);\n    const [questions, setQuestions] = useState(\n        formik.values.quiz.questions || [\n            {\n                question: '',\n                options: [\n                    {\n                        answer: '',\n                        correct: false,\n                    },\n                    {\n                        answer: '',\n                        correct: false,\n                    },\n                ],\n                nrOfCorrectAnswers: 0,\n            },\n        ]\n    );\n\n    /**\n     * It adds a new question to the list of questions.\n     */\n    const AddQuestionHandler = () => {\n        setQuestions([\n            ...questions,\n            {\n                question: '',\n                options: [\n                    {\n                        answer: '',\n                        correct: false,\n                    },\n                    {\n                        answer: '',\n                        correct: false,\n                    },\n                ],\n                nrOfCorrectAnswers: 0,\n            },\n        ]);\n        setOptionCount([...optionCount, 0]);\n    };\n\n    /**\n     * It removes the question from the array of questions.\n     */\n    const deleteQuestion = (questionNumber) => {\n        setQuestions(questions.filter((v, idx) => idx !== questionNumber));\n    };\n\n    /**\n     * This function is used to update the question text in the questions array\n     */\n    const editQuestion = (e, index) => {\n        const changeValue = e.target.value;\n        const helper = questions.map((values, idx) => {\n            if (idx === index) {\n                return {\n                    ...values,\n                    question: changeValue,\n                };\n            }\n            return values;\n        });\n        setQuestions(helper);\n    };\n\n    /**\n     * It adds an option to the question at the specified index.\n     */\n    const addOption = (index) => {\n        const addingOption = questions.map((value, idx) => {\n            if (idx === index) {\n                value.options.push({ answer: '', correct: false });\n            }\n            return value;\n        });\n\n        setQuestions(addingOption);\n    };\n\n    /**\n     * This function is used to update the answer of a question option\n     */\n    const editOption = (event, index, optionIndex) => {\n        const changedValue = event.target.value;\n        const helper = questions.map((value, idx) => {\n            if (idx === index) {\n                let arr = value.options;\n                if (arr[optionIndex].answer === '') {\n                    setOptionCount(\n                        optionCount.map((op, i) => {\n                            // if (op > 0) {\n                            //     return op;\n                            // }\n                            if (i === index && changedValue !== '') {\n                                return op + 1;\n                            } else if (i === index && changedValue === '') {\n                                return op - 1;\n                            }\n                            return op;\n                        })\n                    );\n                }\n                arr[optionIndex] = {\n                    ...arr[optionIndex],\n                    answer: changedValue,\n                };\n                return {\n                    ...value,\n                    options: arr,\n                };\n            }\n            return value;\n        });\n        setQuestions(helper);\n    };\n\n    /**\n     * This function deletes an option from a question\n     */\n    const deleteOption = (questionNumber, optionNumber) => {\n        const del = questions.map((value, idx) => {\n            if (idx === questionNumber) {\n                if (value.options.length > 2) {\n                    value.options.splice(optionNumber, 1);\n                } else {\n                    alert('Each question must has atleast 2 options');\n                }\n            }\n            return value;\n        });\n        setQuestions(del);\n    };\n\n    /**\n     * * If the option is correct, then set the correct value to false and decrease the number of\n     * correct answers by 1.\n     * * If the option is incorrect, then set the correct value to true and increase the number of\n     * correct answers by 1\n     */\n    const addCorrectAnswer = (questionNumber, optionNumber) => {\n        const add = questions.map((value, idx) => {\n            if (idx === questionNumber) {\n                let arr = value.options;\n                if (value.options.at(optionNumber).correct) {\n                    arr[optionNumber].correct = false;\n                    value.nrOfCorrectAnswers = value.nrOfCorrectAnswers - 1;\n                } else {\n                    arr[optionNumber].correct = true;\n                    value.nrOfCorrectAnswers = value.nrOfCorrectAnswers + 1;\n                }\n                return {\n                    ...value,\n                    options: arr,\n                };\n            }\n            return value;\n        });\n        setQuestions(add);\n        console.log(questions);\n    };\n\n    /**\n     * It checks to see if the answer is correct and returns a color based on that.\n     */\n    const checkToggle = (answer, idx, color) => {\n        if (answer) {\n            return '#72B841';\n        } else {\n            return color;\n        }\n    };\n\n    /**\n     * It sends the quiz to the next phase.\n     */\n    const saveQuiz = () => {\n        formik.setFieldValue('quiz.questions', questions);\n        setActiveModal('PERCENTAGE_PAGE');\n        setShowMessage(false);\n        setOptionsPerQuestion(optionCount);\n    };\n\n    return (\n        <>\n            {questions.map((question, index) => (\n                <>\n                    <FormStyled.Fieldset>\n                        <FormStyled.Label>\n                            QUIZ QUESTION {index + 1}\n                        </FormStyled.Label>\n                        <FormStyled.Input\n                            onChange={(e) => editQuestion(e, index)}\n                            type='text'\n                            id={`question-${index}`}\n                            name='question'\n                            placeholder='i.e. What is our token name?'\n                            value={question.question}\n                            required\n                        />\n                    </FormStyled.Fieldset>\n\n                    <FormStyled.Fieldset>\n                        <FormStyled.Label>QUIZ OPTIONS</FormStyled.Label>\n                        {question.options.map((ele, idx) => (\n                            <Styled.AnswerBox>\n                                <Styled.IconBox mr='10px'>\n                                    <BsThreeDotsVertical />\n                                </Styled.IconBox>\n                                <Styled.AnswerInput\n                                    id={`answerInput-${idx}`}\n                                    name={ele.answer}\n                                    onChange={(e) => editOption(e, index, idx)}\n                                    value={ele.answer}\n                                    required\n                                />\n                                <Styled.IconBox\n                                    ml='10px'\n                                    id={`iconBox-${idx}`}\n                                    color={() =>\n                                        checkToggle(ele.correct, idx, 'white')\n                                    }\n                                    border={() =>\n                                        checkToggle(\n                                            ele.correct,\n                                            idx,\n                                            'rgba(255, 255, 255, 0.2)'\n                                        )\n                                    }\n                                    onClick={() => addCorrectAnswer(index, idx)}\n                                >\n                                    <AiOutlineCheck />\n                                </Styled.IconBox>\n                                <Styled.IconBox\n                                    ml='10px'\n                                    onClick={\n                                        question.options.length > 2\n                                            ? () => deleteOption(index, idx)\n                                            : undefined\n                                    }\n                                >\n                                    {question.options.length > 2 ? (\n                                        <FaTrashAlt\n                                            style={{ color: 'white' }}\n                                        />\n                                    ) : (\n                                        <FaTrashAlt\n                                            style={{\n                                                color: 'rgba(255,255,255,0.2)',\n                                            }}\n                                        />\n                                    )}\n                                </Styled.IconBox>\n                            </Styled.AnswerBox>\n                        ))}\n                        <Styled.AnswerBox>\n                            <Styled.IconBox\n                                mr='10px'\n                                border='#A5A5A5'\n                                onClick={() =>\n                                    addOption(index, question.options.length)\n                                }\n                            >\n                                <IoMdAdd />\n                            </Styled.IconBox>\n                            <Styled.AddOptionText\n                                onClick={() =>\n                                    addOption(index, question.options.length)\n                                }\n                            >\n                                Add Answer\n                            </Styled.AddOptionText>\n                        </Styled.AnswerBox>\n                    </FormStyled.Fieldset>\n                    {questions.length > 1 && (\n                        <FormStyled.DeleteWrapper\n                            onClick={(e) => deleteQuestion(index)}\n                        >\n                            <FormStyled.IconButton>\n                                <FaTrashAlt />\n                            </FormStyled.IconButton>\n                            <FormStyled.TextLabel marginLeft='10px'>\n                                Delete Question\n                            </FormStyled.TextLabel>\n                        </FormStyled.DeleteWrapper>\n                    )}\n                </>\n            ))}\n            <Styled.AddQuestionBox>\n                <Styled.Circle onClick={AddQuestionHandler}>\n                    <IoMdAdd style={{ color: 'white' }} />\n                </Styled.Circle>\n                Add Another Question\n            </Styled.AddQuestionBox>\n            <FormStyled.Button onClick={saveQuiz}>\n                Finish Quiz\n            </FormStyled.Button>\n        </>\n    );\n};\n\nexport default CreateQuestion;\n","import React, { useState } from 'react';\nimport { useOutletContext } from 'react-router-dom';\n\n// Styling\nimport { FormStyled } from '../../../../components/Form';\n\nconst Home = (props) => {\n    const { formik } = useOutletContext();\n\n    const [title, setTitle] = useState(formik.values.quiz.title || '');\n    const [description, setDescription] = useState(\n        formik.values.quiz.description || ''\n    );\n\n    const saveContent = () => {\n        formik.setFieldValue('quiz.title', title);\n        formik.setFieldValue('quiz.description', description);\n        props.setActiveModal('CREATE_QUIZ');\n        props.setShowMessage(false);\n    };\n\n    return (\n        <>\n            <FormStyled.Fieldset>\n                <FormStyled.Label htmlFor='quiz.title'>\n                    QUIZ TITLE*\n                </FormStyled.Label>\n                <FormStyled.Input\n                    onChange={(e) => setTitle(e.target.value)}\n                    type='text'\n                    id='title'\n                    name='quiz.title'\n                    placeholder='This will be the title of your Gate'\n                    value={title}\n                    required\n                />\n            </FormStyled.Fieldset>\n\n            <FormStyled.Fieldset>\n                <FormStyled.Label htmlFor='description'>\n                    QUIZ Description*\n                </FormStyled.Label>\n                <FormStyled.Textarea\n                    height='100px'\n                    id='description'\n                    onChange={(e) => setDescription(e.target.value)}\n                    name='quiz.description'\n                    placeholder='This will be the description of your Gate. We reccommend maximum of 2 lines.'\n                    value={description}\n                    required\n                ></FormStyled.Textarea>\n            </FormStyled.Fieldset>\n\n            <FormStyled.Button\n                id='submit_msg'\n                type='button'\n                onClick={saveContent}\n            >\n                Next\n            </FormStyled.Button>\n        </>\n    );\n};\n\nexport default Home;\n","// Styling\nimport { useOutletContext } from 'react-router-dom';\nimport { FormStyled } from '../../../../components/Form';\n\n// Components\nimport Loader from '../../../../components/Loader';\n\nconst Percentage = () => {\n    const { formik } = useOutletContext();\n\n    return (\n        <>\n            <FormStyled.Fieldset>\n                <FormStyled.Label>\n                    Percentage necessary to pass the Quiz?\n                </FormStyled.Label>\n                <FormStyled.GridBox\n                    cols={5}\n                    onChange={(e) =>\n                        formik.setFieldValue(\n                            'quiz.percentage',\n                            parseFloat(e.target.value)\n                        )\n                    }\n                >\n                    <FormStyled.Radio\n                        id='percentage-1'\n                        name='quiz.percentage'\n                        value={0}\n                        label='0%'\n                        checked={formik.values.quiz.percentage === 0}\n                    />\n                    <FormStyled.Radio\n                        id='percentage-2'\n                        name='quiz.percentage'\n                        value={0.25}\n                        label='25%'\n                        checked={formik.values.quiz.percentage === 0.25}\n                    />\n                    <FormStyled.Radio\n                        id='percentage-3'\n                        name='quiz.percentage'\n                        value={0.5}\n                        label='50%'\n                        checked={formik.values.quiz.percentage === 0.5}\n                    />\n                    <FormStyled.Radio\n                        id='percentage-4'\n                        name='quiz.percentage'\n                        value={0.75}\n                        label='75%'\n                        checked={formik.values.quiz.percentage === 0.75}\n                    />\n                    <FormStyled.Radio\n                        id='percentage-5'\n                        name='quiz.percentage'\n                        value={1}\n                        label='100%'\n                        checked={formik.values.quiz.percentage === 1}\n                    />\n                </FormStyled.GridBox>\n            </FormStyled.Fieldset>\n\n            <FormStyled.Button type='submit'>\n                {formik.isSubmitting && <Loader color='white' />}\n                Submit\n            </FormStyled.Button>\n        </>\n    );\n};\n\nexport default Percentage;\n","import React, { useState, useEffect } from 'react';\n\n// Styling\nimport * as Styled from './style';\nimport * as ThemeStyled from '../../theme/style';\nimport { FormStyled } from '../../components/Form';\n\n// Components\nimport space from '../../utils/canvas';\nimport CreateQuestion from './Component/CreateQuestion';\nimport Home from './Component/Home';\nimport Percentage from './Component/Persentage';\n\n// Hooks\nimport { useOutletContext } from 'react-router-dom';\nimport { FormikContextType } from 'formik';\nimport { QuizOptionInput } from '../../graphql/API';\n\ninterface Key {\n    taskLink: string;\n    titleDescriptionPair: { title: string; description: string }[];\n    keysRewarded: number;\n    peopleLimit: number;\n    unlimited: boolean;\n\n    // Contract Interaction\n    quiz: {\n        title: string;\n        description: string;\n        passedAt: number;\n        questions: {\n            question: string;\n            options: QuizOptionInput[];\n            nrOfCorrectAnswers: number;\n        }[];\n    };\n}\n\n/**\n * This function is responsible for creating a quiz.\n */\nconst CreateQuiz = () => {\n    const {\n        formik,\n        edit,\n        loading,\n        setBackButton,\n        setValidator,\n    }: {\n        formik: FormikContextType<Key>;\n        edit: boolean;\n        loading: boolean;\n        setBackButton(obj: Record<string, string | number>): void;\n        setValidator(func: () => void): void;\n    } = useOutletContext();\n\n    // State\n    const [message, setMessage] = useState('Processing your Quiz');\n    const [showMessage, setShowMessage] = useState(false);\n    const [activeModal, setActiveModal] = useState('HOME');\n    const [optionsPerQuestion, setOptionsPerQuestion] = useState([0]);\n\n    const ActiveModal = () => {\n        switch (activeModal) {\n            case 'HOME':\n                return (\n                    <Home\n                        setActiveModal={setActiveModal}\n                        setShowMessage={setShowMessage}\n                    />\n                );\n            case 'CREATE_QUIZ':\n                return (\n                    <CreateQuestion\n                        setActiveModal={setActiveModal}\n                        setShowMessage={setShowMessage}\n                        setOptionsPerQuestion={setOptionsPerQuestion}\n                        initialClont={optionsPerQuestion}\n                    />\n                );\n            case 'PERCENTAGE_PAGE':\n                return <Percentage />;\n            default:\n                return (\n                    <Home\n                        setActiveModal={setActiveModal}\n                        setShowMessage={setShowMessage}\n                    />\n                );\n        }\n    };\n\n    /**\n     * It validates the form.\n     * @param values - The values of the form.\n     * @returns The validation function returns an object with errors.\n     */\n    const validate = async (values) => {\n        // eslint-disable-next-line prefer-const\n        let errors = {};\n\n        if (\n            values.quiz.title.length === 0 ||\n            values.quiz.description.length === 0\n        ) {\n            setMessage('Please enter title and description');\n        }\n\n        if (values.quiz.questions.length === 0) {\n            setMessage('Please enter at least one question');\n        }\n\n        values.quiz.questions.forEach((value, idx) => {\n            if (value.question.length === 0) {\n                setMessage(\n                    `In question ${idx + 1} please enter question title`\n                );\n                return false;\n            }\n            if (value.options.length === 0) {\n                setMessage(\n                    `In question ${idx + 1} please enter atleast one option`\n                );\n                return false;\n            }\n            if (\n                value.nrOfCorrectAnswers === 0 ||\n                value.nrOfCorrectAnswers > value.options.length\n            ) {\n                setMessage(`In question ${idx + 1} no correct answer is there`);\n            }\n            if (optionsPerQuestion[idx] !== value.options.length) {\n                setMessage(`In question ${idx + 1} there is a empty option`);\n            }\n        });\n\n        return errors;\n    };\n\n    useEffect(\n        () => space(window.innerHeight, window.innerWidth),\n        [window.innerHeight, window.innerWidth]\n    );\n\n    useEffect(() => {\n        setBackButton({\n            url: -1,\n            text: 'Add a New Key',\n        });\n\n        setValidator(() => validate);\n    }, []);\n\n    return (\n        <FormStyled.FormBox onSubmit={formik.handleSubmit}>\n            <Styled.Container>\n                <ThemeStyled.SpaceBox id='space-canvas' />\n                <FormStyled.H1>{edit ? 'Edit Quiz' : 'Add Quiz'}</FormStyled.H1>\n                <ActiveModal />\n            </Styled.Container>\n        </FormStyled.FormBox>\n    );\n};\n\nexport default CreateQuiz;\n"],"sourceRoot":""}