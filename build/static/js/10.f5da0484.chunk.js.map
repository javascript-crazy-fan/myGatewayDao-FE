{"version":3,"sources":["pages/Gate/index.tsx"],"names":["GatePage","gate","useParams","useAuth","userInfo","loggingIn","useQuery","gql","getGate","variables","id","dbData","data","loading","error","listUsers","filter","admins","length","or","map","admin","eq","adminsData","listGates","preRequisites","completedGates","gateID","preRequisitesData","useState","gateData","setGateData","loaded","setLoaded","gates","items","obj","keysDone","setKeysDone","tasks","userID","taskStatus","setTaskStatus","setAdmins","setPreRequisites","useEffect","handleData","a","isAdmin","console","to","context","holders","adminList","preRequisitesList"],"mappings":"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","file":"static/js/10.f5da0484.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { useParams, Navigate, Outlet } from 'react-router-dom';\n\n// Hooks\nimport { gql, useQuery } from '@apollo/client';\nimport { useAuth } from '../../contexts/UserContext';\n\n// Components\nimport Page from '../../components/Page';\nimport { useState, useEffect } from 'react';\nimport React from 'react';\n\n// API\nimport { getGate, listGates, listUsers } from '../../graphql/queries';\nimport { Gate, User } from '../../graphql/API';\n\n/**\n * This function is responsible for rendering the page\n * @returns The gate page is being returned.\n */\nconst GatePage: React.FC = () => {\n    const { gate } = useParams();\n    const { userInfo, loggingIn }: Record<string, any> = useAuth();\n\n    /* This is a query to the database. It is a GraphQL query that is being made to the database. */\n    const {\n        data: dbData,\n        loading,\n        error,\n    } = useQuery(gql(getGate), {\n        variables: {\n            id: gate,\n        },\n    });\n\n    const {\n        data: adminsData,\n        loading: adminsLoading,\n        error: adminsError,\n    } = useQuery(gql(listUsers), {\n        variables: {\n            filter: {\n                ...(dbData &&\n                    dbData?.getGate.admins.length > 0 && {\n                        or: dbData?.getGate.admins.map((admin) => ({\n                            id: {\n                                eq: admin,\n                            },\n                        })),\n                    }),\n            },\n        },\n    });\n\n    const {\n        data: preRequisitesData,\n        loading: preRequisitesLoading,\n        error: preRequisitesError,\n    } = useQuery(gql(listGates), {\n        variables: {\n            filter: {\n                ...(dbData &&\n                    dbData?.getGate.preRequisites.completedGates.length > 0 && {\n                        or: dbData?.getGate.preRequisites.completedGates.map(\n                            (gateID) => ({\n                                id: {\n                                    eq: gateID,\n                                },\n                            })\n                        ),\n                    }),\n            },\n        },\n    });\n\n    const [gateData, setGateData] = useState(dbData?.getGate || {});\n    const [loaded, setLoaded] = useState(false);\n    const [keysDone, setKeysDone] = useState(\n        userInfo?.gates?.items?.map(\n            (obj: Record<string, any>) =>\n                (obj.gateID === gate && obj?.keysDone) || 0\n        )\n    );\n    const [taskStatus, setTaskStatus] = useState(\n        userInfo?.gates?.items?.filter(\n            (obj: Record<string, any>) => obj.gateID !== gate\n        ).length > 0\n            ? userInfo?.gates?.items\n                  ?.filter((obj: Record<string, any>) => obj.gateID !== gate)[0]\n                  .tasks?.items?.map(\n                      (obj: Record<string, any>) =>\n                          obj.userID === userInfo.id && obj\n                  )\n            : []\n    );\n    const [admins, setAdmins] = useState<User[]>(adminsData?.listUsers.items);\n    const [preRequisites, setPreRequisites] = useState<Gate[]>(\n        preRequisitesData?.listGates.items\n    );\n\n    // Fetch data regarding these\n    useEffect(() => {\n        const handleData = async () => {\n            if (dbData && !loading && !error) {\n                setGateData(dbData.getGate);\n            }\n        };\n\n        handleData();\n    }, [gate, loading, dbData]);\n\n    /* This is a React Hook that is being used to check if the data has been loaded. If the data has\n    been loaded, then the `loaded` state is set to `true`. */\n    useEffect(() => {\n        setLoaded(\n            !!gateData &&\n                !loading &&\n                userInfo !== null &&\n                userInfo?.isAdmin !== null &&\n                !!admins?.length\n        );\n    }, [gateData, loading, userInfo, admins]);\n\n    /* Fetching the data from the database. */\n    useEffect(() => {\n        setKeysDone(\n            userInfo?.gates?.items?.filter(\n                (obj: Record<string, any>) => obj.gateID === gate\n            )[0]?.keysDone || 0\n        );\n        setTaskStatus(\n            userInfo?.gates?.items?.filter(\n                (obj: Record<string, any>) => obj.gateID === gate && obj\n            ).length > 0\n                ? userInfo?.gates?.items\n                      ?.filter(\n                          (obj: Record<string, any>) =>\n                              obj.gateID === gate && obj\n                      )[0]\n                      .tasks?.items?.filter(\n                          (obj: Record<string, any>) =>\n                              obj.userID === userInfo.id\n                      )\n                : []\n        );\n    }, [gate, userInfo]);\n\n    useEffect(() => {\n        adminsData && setAdmins(adminsData?.listUsers.items);\n    }, [gate, adminsData]);\n\n    useEffect(() => {\n        preRequisitesData &&\n            setPreRequisites(preRequisitesData?.listGates.items);\n    }, [gate, preRequisitesData]);\n\n    /* This is a catch-all error handler. If there is an error, it will be logged to the console and\n    the user will be redirected to the 404 page. */\n    if (error) {\n        console.error(error);\n        return <Navigate to='/404' />;\n    }\n\n    return (\n        <Page>\n            <Outlet\n                context={{\n                    gateData: {\n                        ...gateData,\n                        holders: dbData?.getGate?.holders || 0,\n                        keysDone,\n                        taskStatus,\n                        adminList: admins || [],\n                        preRequisitesList: preRequisites || [],\n                    },\n                    setGateData,\n                    loaded,\n                    loading,\n                }}\n            />\n        </Page>\n    );\n};\n\nexport default GatePage;\n"],"sourceRoot":""}