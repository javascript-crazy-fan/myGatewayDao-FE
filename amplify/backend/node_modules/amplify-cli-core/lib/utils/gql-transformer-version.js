"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTransformerVersion = void 0;
const feature_flags_1 = require("../feature-flags");
const state_manager_1 = require("../state-manager");
async function getTransformerVersion(context) {
    migrateToTransformerVersionFeatureFlag(context);
    const transformerVersion = feature_flags_1.FeatureFlags.getNumber('graphQLTransformer.transformerVersion');
    if (transformerVersion !== 1 && transformerVersion !== 2) {
        throw new Error(`Invalid value specified for transformerVersion: '${transformerVersion}'`);
    }
    return transformerVersion;
}
exports.getTransformerVersion = getTransformerVersion;
async function migrateToTransformerVersionFeatureFlag(context) {
    var _a;
    const projectPath = (_a = state_manager_1.pathManager.findProjectRoot()) !== null && _a !== void 0 ? _a : process.cwd();
    let config = state_manager_1.stateManager.getCLIJSON(projectPath, undefined, {
        throwIfNotExist: false,
        preserveComments: true,
    });
    const useExperimentalPipelineTransformer = feature_flags_1.FeatureFlags.getBoolean('graphQLTransformer.useExperimentalPipelinedTransformer');
    const transformerVersion = feature_flags_1.FeatureFlags.getNumber('graphQLTransformer.transformerVersion');
    if (useExperimentalPipelineTransformer && transformerVersion === 1) {
        config.features.graphqltransformer.transformerversion = 2;
        state_manager_1.stateManager.setCLIJSON(projectPath, config);
        await feature_flags_1.FeatureFlags.reloadValues();
        context.print.warning(`\nThe project is configured with 'transformerVersion': ${transformerVersion}, but 'useExperimentalPipelinedTransformer': ${useExperimentalPipelineTransformer}. Setting the 'transformerVersion': ${config.features.graphqltransformer.transformerversion}. 'useExperimentalPipelinedTransformer' is deprecated.`);
    }
}
//# sourceMappingURL=gql-transformer-version.js.map