{"version":3,"file":"index.js","sources":["../src/util.ts","../src/Digest.ts","../src/signers/ES256KSigner.ts","../src/signers/EdDSASigner.ts","../src/VerifierAlgorithm.ts","../src/SignerAlgorithm.ts","../src/JWT.ts","../src/JWE.ts","../src/xc20pEncryption.ts","../src/signers/EllipticSigner.ts","../src/signers/NaclSigner.ts","../src/signers/SimpleSigner.ts"],"sourcesContent":["import * as u8a from 'uint8arrays'\n\n/**\n * @deprecated Signers will be expected to return base64url `string` signatures.\n */\nexport interface EcdsaSignature {\n  r: string\n  s: string\n  recoveryParam?: number\n}\n\nexport function bytesToBase64url(b: Uint8Array): string {\n  return u8a.toString(b, 'base64url')\n}\n\nexport function base64ToBytes(s: string): Uint8Array {\n  const inputBase64Url = s.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '')\n  return u8a.fromString(inputBase64Url, 'base64url')\n}\n\nexport function bytesToBase64(b: Uint8Array): string {\n  return u8a.toString(b, 'base64pad')\n}\n\nexport function base58ToBytes(s: string): Uint8Array {\n  return u8a.fromString(s, 'base58btc')\n}\n\nexport function bytesToBase58(b: Uint8Array): string {\n  return u8a.toString(b, 'base58btc')\n}\n\nexport function hexToBytes(s: string): Uint8Array {\n  const input = s.startsWith('0x') ? s.substring(2) : s\n  return u8a.fromString(input.toLowerCase(), 'base16')\n}\n\nexport function encodeBase64url(s: string): string {\n  return bytesToBase64url(u8a.fromString(s))\n}\n\nexport function decodeBase64url(s: string): string {\n  return u8a.toString(base64ToBytes(s))\n}\n\nexport function bytesToHex(b: Uint8Array): string {\n  return u8a.toString(b, 'base16')\n}\n\nexport function stringToBytes(s: string): Uint8Array {\n  return u8a.fromString(s)\n}\n\nexport function toJose({ r, s, recoveryParam }: EcdsaSignature, recoverable?: boolean): string {\n  const jose = new Uint8Array(recoverable ? 65 : 64)\n  jose.set(u8a.fromString(r, 'base16'), 0)\n  jose.set(u8a.fromString(s, 'base16'), 32)\n  if (recoverable) {\n    if (recoveryParam === undefined) {\n      throw new Error('Signer did not return a recoveryParam')\n    }\n    jose[64] = recoveryParam\n  }\n  return bytesToBase64url(jose)\n}\n\nexport function fromJose(signature: string): { r: string; s: string; recoveryParam: number } {\n  const signatureBytes: Uint8Array = base64ToBytes(signature)\n  if (signatureBytes.length < 64 || signatureBytes.length > 65) {\n    throw new TypeError(`Wrong size for signature. Expected 64 or 65 bytes, but got ${signatureBytes.length}`)\n  }\n  const r = bytesToHex(signatureBytes.slice(0, 32))\n  const s = bytesToHex(signatureBytes.slice(32, 64))\n  const recoveryParam = signatureBytes.length === 65 ? signatureBytes[64] : undefined\n  return { r, s, recoveryParam }\n}\n\nexport function toSealed(ciphertext: string, tag: string): Uint8Array {\n  return u8a.concat([base64ToBytes(ciphertext), base64ToBytes(tag)])\n}\n\nconst hexMatcher = /^(0x)?([a-fA-F0-9]{64}|[a-fA-F0-9]{128})$/\nconst base58Matcher = /^([1-9A-HJ-NP-Za-km-z]{44}|[1-9A-HJ-NP-Za-km-z]{88})$/\nconst base64Matcher = /^([0-9a-zA-Z=\\-_\\+\\/]{43}|[0-9a-zA-Z=\\-_\\+\\/]{86})(={0,2})$/\n\n/**\n * Parses a private key and returns the Uint8Array representation.\n * This method uses an heuristic to determine the key encoding to then be able to parse it into 32 or 64 bytes.\n *\n * @param input a 32 or 64 byte key presented either as a Uint8Array or as a hex, base64, or base58btc encoded string\n *\n * @throws TypeError('Invalid private key format') if the key doesn't match any of the accepted formats or length\n */\nexport function parseKey(input: string | Uint8Array): Uint8Array {\n  if (typeof input === 'string') {\n    if (hexMatcher.test(input)) {\n      return hexToBytes(input)\n    } else if (base58Matcher.test(input)) {\n      return base58ToBytes(input)\n    } else if (base64Matcher.test(input)) {\n      return base64ToBytes(input)\n    } else {\n      throw TypeError('Invalid private key format')\n    }\n  } else if (input instanceof Uint8Array) {\n    return input\n  } else {\n    throw TypeError('Invalid private key format')\n  }\n}\n\nexport function leftpad(data: string, size = 64): string {\n  if (data.length === size) return data\n  return '0'.repeat(size - data.length) + data\n}\n","import { hash } from '@stablelib/sha256'\nimport * as u8a from 'uint8arrays'\nimport { keccak_256 } from 'js-sha3' // eslint-disable-line\n\nexport function sha256(payload: string | Uint8Array): Uint8Array {\n  const data = typeof payload === 'string' ? u8a.fromString(payload) : payload\n  return hash(data)\n}\n\nexport function keccak(data: Uint8Array): Uint8Array {\n  return new Uint8Array(keccak_256.arrayBuffer(data))\n}\n\nexport function toEthereumAddress(hexPublicKey: string): string {\n  const hashInput = u8a.fromString(hexPublicKey.slice(2), 'base16')\n  return `0x${u8a.toString(keccak(hashInput).slice(-20), 'base16')}`\n}\n\nfunction writeUint32BE(value: number, array = new Uint8Array(4)): Uint8Array {\n  const encoded = u8a.fromString(value.toString(), 'base10')\n  array.set(encoded, 4 - encoded.length)\n  return array\n}\n\nconst lengthAndInput = (input: Uint8Array): Uint8Array => u8a.concat([writeUint32BE(input.length), input])\n\n// This implementation of concatKDF was inspired by these two implementations:\n// https://github.com/digitalbazaar/minimal-cipher/blob/master/algorithms/ecdhkdf.js\n// https://github.com/panva/jose/blob/master/lib/jwa/ecdh/derive.js\nexport function concatKDF(secret: Uint8Array, keyLen: number, alg: string): Uint8Array {\n  if (keyLen !== 256) throw new Error(`Unsupported key length: ${keyLen}`)\n  const value = u8a.concat([\n    lengthAndInput(u8a.fromString(alg)),\n    lengthAndInput(new Uint8Array(0)), // apu\n    lengthAndInput(new Uint8Array(0)), // apv\n    writeUint32BE(keyLen)\n  ])\n  // since our key lenght is 256 we only have to do one round\n  const roundNumber = 1\n  return hash(u8a.concat([writeUint32BE(roundNumber), secret, value]))\n}\n","import { parseKey, leftpad } from '../util'\nimport { toJose } from '../util'\nimport { Signer } from '../JWT'\nimport { sha256 } from '../Digest'\n\nimport { ec as EC, ec } from 'elliptic'\nconst secp256k1: EC = new EC('secp256k1')\n\n/**\n *  Creates a configured signer function for signing data using the ES256K (secp256k1 + sha256) algorithm.\n *\n *  The signing function itself takes the data as a `Uint8Array` or `string` and returns a `base64Url`-encoded signature\n *\n *  @example\n *  ```typescript\n *  const sign: Signer = ES256KSigner(process.env.PRIVATE_KEY)\n *  const signature: string = await sign(data)\n *  ```\n *\n *  @param    {String}    privateKey   a private key as `Uint8Array` or encoded as `base64`, `base58`, or `hex` string\n *  @param    {Boolean}   recoverable  an optional flag to add the recovery param to the generated signatures\n *  @return   {Function}               a configured signer function `(data: string | Uint8Array): Promise<string>`\n */\nexport function ES256KSigner(privateKey: string | Uint8Array, recoverable: boolean = false): Signer {\n  const privateKeyBytes: Uint8Array = parseKey(privateKey)\n  if (privateKeyBytes.length !== 32) {\n    throw new Error(`Invalid private key format. Expecting 32 bytes, but got ${privateKeyBytes.length}`)\n  }\n  const keyPair: ec.KeyPair = secp256k1.keyFromPrivate(privateKeyBytes)\n\n  return async (data: string | Uint8Array): Promise<string> => {\n    const { r, s, recoveryParam }: EC.Signature = keyPair.sign(sha256(data))\n    return toJose(\n      {\n        r: leftpad(r.toString('hex')),\n        s: leftpad(s.toString('hex')),\n        recoveryParam\n      },\n      recoverable\n    )\n  }\n}\n","import { sign } from '@stablelib/ed25519'\nimport { Signer } from '../JWT'\nimport { bytesToBase64url, parseKey, stringToBytes } from '../util'\n\n/**\n *  Creates a configured signer function for signing data using the EdDSA (Ed25519) algorithm.\n *\n *  The signing function itself takes the data as a `Uint8Array` or `string` and returns a `base64Url`-encoded signature\n *\n *  @example\n *  ```typescript\n *  const sign: Signer = EdDSASigner(process.env.PRIVATE_KEY)\n *  const signature: string = await sign(data)\n *  ```\n *\n *  @param    {String}    secretKey   a 64 byte secret key as `Uint8Array` or encoded as `base64`, `base58`, or `hex` string\n *  @return   {Function}              a configured signer function `(data: string | Uint8Array): Promise<string>`\n */\nexport function EdDSASigner(secretKey: string | Uint8Array): Signer {\n  const privateKeyBytes: Uint8Array = parseKey(secretKey)\n  if (privateKeyBytes.length !== 64) {\n    throw new Error(`Invalid private key format. Expecting 64 bytes, but got ${privateKeyBytes.length}`)\n  }\n  return async (data: string | Uint8Array): Promise<string> => {\n    const dataBytes: Uint8Array = typeof data === 'string' ? stringToBytes(data) : data\n    const sig: Uint8Array = sign(privateKeyBytes, dataBytes)\n    return bytesToBase64url(sig)\n  }\n}\n","import { ec as EC } from 'elliptic'\nimport { sha256, toEthereumAddress } from './Digest'\nimport { verify } from '@stablelib/ed25519'\nimport type { VerificationMethod } from 'did-resolver'\nimport { hexToBytes, base58ToBytes, base64ToBytes, bytesToHex, EcdsaSignature, stringToBytes } from './util'\n\nconst secp256k1 = new EC('secp256k1')\n\n// converts a JOSE signature to it's components\nexport function toSignatureObject(signature: string, recoverable = false): EcdsaSignature {\n  const rawsig: Uint8Array = base64ToBytes(signature)\n  if (rawsig.length !== (recoverable ? 65 : 64)) {\n    throw new Error('wrong signature length')\n  }\n  const r: string = bytesToHex(rawsig.slice(0, 32))\n  const s: string = bytesToHex(rawsig.slice(32, 64))\n  const sigObj: EcdsaSignature = { r, s }\n  if (recoverable) {\n    sigObj.recoveryParam = rawsig[64]\n  }\n  return sigObj\n}\n\ninterface LegacyVerificationMethod extends VerificationMethod {\n  publicKeyBase64: string\n}\n\nfunction extractPublicKeyBytes(pk: VerificationMethod): Uint8Array {\n  if (pk.publicKeyBase58) {\n    return base58ToBytes(pk.publicKeyBase58)\n  } else if ((<LegacyVerificationMethod>pk).publicKeyBase64) {\n    return base64ToBytes((<LegacyVerificationMethod>pk).publicKeyBase64)\n  } else if (pk.publicKeyHex) {\n    return hexToBytes(pk.publicKeyHex)\n  }\n  return new Uint8Array()\n}\n\nexport function verifyES256K(\n  data: string,\n  signature: string,\n  authenticators: VerificationMethod[]\n): VerificationMethod {\n  const hash: Uint8Array = sha256(data)\n  const sigObj: EcdsaSignature = toSignatureObject(signature)\n  const fullPublicKeys = authenticators.filter(({ ethereumAddress, blockchainAccountId }) => {\n    return typeof ethereumAddress === 'undefined' && typeof blockchainAccountId === 'undefined'\n  })\n  const ethAddressKeys = authenticators.filter(({ ethereumAddress, blockchainAccountId }) => {\n    return typeof ethereumAddress !== 'undefined' || typeof blockchainAccountId !== undefined\n  })\n\n  let signer: VerificationMethod = fullPublicKeys.find((pk: VerificationMethod) => {\n    try {\n      const pubBytes = extractPublicKeyBytes(pk)\n      return secp256k1.keyFromPublic(pubBytes).verify(hash, sigObj)\n    } catch (err) {\n      return false\n    }\n  })\n\n  if (!signer && ethAddressKeys.length > 0) {\n    signer = verifyRecoverableES256K(data, signature, ethAddressKeys)\n  }\n\n  if (!signer) throw new Error('Signature invalid for JWT')\n  return signer\n}\n\nexport function verifyRecoverableES256K(\n  data: string,\n  signature: string,\n  authenticators: VerificationMethod[]\n): VerificationMethod {\n  let signatures: EcdsaSignature[]\n  if (signature.length > 86) {\n    signatures = [toSignatureObject(signature, true)]\n  } else {\n    const so = toSignatureObject(signature, false)\n    signatures = [\n      { ...so, recoveryParam: 0 },\n      { ...so, recoveryParam: 1 }\n    ]\n  }\n\n  const checkSignatureAgainstSigner = (sigObj: EcdsaSignature): VerificationMethod => {\n    const hash: Uint8Array = sha256(data)\n    const recoveredKey: any = secp256k1.recoverPubKey(hash, sigObj, sigObj.recoveryParam)\n    const recoveredPublicKeyHex: string = recoveredKey.encode('hex')\n    const recoveredCompressedPublicKeyHex: string = recoveredKey.encode('hex', true)\n    const recoveredAddress: string = toEthereumAddress(recoveredPublicKeyHex)\n\n    const signer: VerificationMethod = authenticators.find((pk: VerificationMethod) => {\n      const keyHex = bytesToHex(extractPublicKeyBytes(pk))\n      return (\n        keyHex === recoveredPublicKeyHex ||\n        keyHex === recoveredCompressedPublicKeyHex ||\n        pk.ethereumAddress?.toLowerCase() === recoveredAddress ||\n        pk.blockchainAccountId?.split('@eip155')?.[0].toLowerCase() === recoveredAddress\n      )\n    })\n\n    return signer\n  }\n\n  const signer: VerificationMethod[] = signatures.map(checkSignatureAgainstSigner).filter((key) => key != null)\n\n  if (signer.length === 0) throw new Error('Signature invalid for JWT')\n  return signer[0]\n}\n\nexport function verifyEd25519(\n  data: string,\n  signature: string,\n  authenticators: VerificationMethod[]\n): VerificationMethod {\n  const clear: Uint8Array = stringToBytes(data)\n  const sig: Uint8Array = base64ToBytes(signature)\n  const signer: VerificationMethod = authenticators.find((pk: VerificationMethod) => {\n    return verify(extractPublicKeyBytes(pk), clear, sig)\n  })\n  if (!signer) throw new Error('Signature invalid for JWT')\n  return signer\n}\n\ntype Verifier = (data: string, signature: string, authenticators: VerificationMethod[]) => VerificationMethod\ninterface Algorithms {\n  [name: string]: Verifier\n}\nconst algorithms: Algorithms = {\n  ES256K: verifyES256K,\n  // This is a non-standard algorithm but retained for backwards compatibility\n  // see https://github.com/decentralized-identity/did-jwt/issues/146\n  'ES256K-R': verifyRecoverableES256K,\n  // This is actually incorrect but retained for backwards compatibility\n  // see https://github.com/decentralized-identity/did-jwt/issues/130\n  Ed25519: verifyEd25519,\n  EdDSA: verifyEd25519\n}\n\nfunction VerifierAlgorithm(alg: string): Verifier {\n  const impl: Verifier = algorithms[alg]\n  if (!impl) throw new Error(`Unsupported algorithm ${alg}`)\n  return impl\n}\n\nVerifierAlgorithm.toSignatureObject = toSignatureObject\n\nexport default VerifierAlgorithm\n","import { Signer, SignerAlgorithm } from './JWT'\nimport { EcdsaSignature, fromJose, toJose } from './util'\n\nfunction instanceOfEcdsaSignature(object: any): object is EcdsaSignature {\n  return typeof object === 'object' && 'r' in object && 's' in object\n}\n\nexport function ES256KSignerAlg(recoverable?: boolean): SignerAlgorithm {\n  return async function sign(payload: string, signer: Signer): Promise<string> {\n    const signature: EcdsaSignature | string = await signer(payload)\n    if (instanceOfEcdsaSignature(signature)) {\n      return toJose(signature, recoverable)\n    } else {\n      if (recoverable && typeof fromJose(signature).recoveryParam === 'undefined') {\n        throw new Error(`ES256K-R not supported when signer doesn't provide a recovery param`)\n      }\n      return signature\n    }\n  }\n}\n\nexport function Ed25519SignerAlg(): SignerAlgorithm {\n  return async function sign(payload: string, signer: Signer): Promise<string> {\n    const signature: EcdsaSignature | string = await signer(payload)\n    if (!instanceOfEcdsaSignature(signature)) {\n      return signature\n    } else {\n      throw new Error('expected a signer function that returns a string instead of signature object')\n    }\n  }\n}\n\ninterface SignerAlgorithms {\n  [alg: string]: SignerAlgorithm\n}\n\nconst algorithms: SignerAlgorithms = {\n  ES256K: ES256KSignerAlg(),\n  // This is a non-standard algorithm but retained for backwards compatibility\n  // see https://github.com/decentralized-identity/did-jwt/issues/146\n  'ES256K-R': ES256KSignerAlg(true),\n  // This is actually incorrect but retained for backwards compatibility\n  // see https://github.com/decentralized-identity/did-jwt/issues/130\n  Ed25519: Ed25519SignerAlg(),\n  EdDSA: Ed25519SignerAlg()\n}\n\nfunction SignerAlg(alg: string): SignerAlgorithm {\n  const impl: SignerAlgorithm = algorithms[alg]\n  if (!impl) throw new Error(`Unsupported algorithm ${alg}`)\n  return impl\n}\n\nexport default SignerAlg\n","import VerifierAlgorithm from './VerifierAlgorithm'\nimport SignerAlg from './SignerAlgorithm'\nimport { encodeBase64url, decodeBase64url, EcdsaSignature } from './util'\nimport type { Resolver, VerificationMethod, DIDResolutionResult, DIDDocument } from 'did-resolver'\n\nexport type Signer = (data: string | Uint8Array) => Promise<EcdsaSignature | string>\nexport type SignerAlgorithm = (payload: string, signer: Signer) => Promise<string>\n\nexport interface JWTOptions {\n  issuer: string\n  signer: Signer\n  /**\n   * @deprecated Please use `header.alg` to specify the JWT algorithm.\n   */\n  alg?: string\n  expiresIn?: number\n}\n\nexport interface JWTVerifyOptions {\n  /** @deprecated Please use `proofPurpose: 'authentication' instead` */\n  auth?: boolean\n  audience?: string\n  callbackUrl?: string\n  resolver?: Resolver\n  skewTime?: number\n  /** See https://www.w3.org/TR/did-spec-registries/#verification-relationships */\n  proofPurpose?: 'authentication' | 'assertionMethod' | 'capabilityDelegation' | 'capabilityInvocation' | string\n}\n\nexport interface DIDAuthenticator {\n  authenticators: VerificationMethod[]\n  issuer: string\n  didResolutionResult: DIDResolutionResult\n}\n\nexport interface JWTHeader {\n  typ: 'JWT'\n  alg: string\n  [x: string]: any\n}\n\nexport interface JWTPayload {\n  iss?: string\n  sub?: string\n  aud?: string | string[]\n  iat?: number\n  nbf?: number\n  type?: string\n  exp?: number\n  rexp?: number\n  [x: string]: any\n}\n\nexport interface JWTDecoded {\n  header: JWTHeader\n  payload: JWTPayload\n  signature: string\n  data: string\n}\n\nexport interface JWSDecoded {\n  header: JWTHeader\n  payload: string\n  signature: string\n  data: string\n}\n\nexport interface JWTVerified {\n  payload: any\n  didResolutionResult: DIDResolutionResult\n  issuer: string\n  signer: object\n  jwt: string\n}\n\nexport interface PublicKeyTypes {\n  [name: string]: string[]\n}\nexport const SUPPORTED_PUBLIC_KEY_TYPES: PublicKeyTypes = {\n  ES256K: [\n    'EcdsaSecp256k1VerificationKey2019',\n    /**\n     * Equivalent to EcdsaSecp256k1VerificationKey2019 when key is an ethereumAddress\n     */\n    'EcdsaSecp256k1RecoveryMethod2020',\n    /**\n     * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is not an ethereumAddress\n     */\n    'Secp256k1VerificationKey2018',\n    /**\n     * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is not an ethereumAddress\n     */\n    'Secp256k1SignatureVerificationKey2018',\n    /**\n     * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is not an ethereumAddress\n     */\n    'EcdsaPublicKeySecp256k1'\n  ],\n  'ES256K-R': [\n    'EcdsaSecp256k1VerificationKey2019',\n    /**\n     * Equivalent to EcdsaSecp256k1VerificationKey2019 when key is an ethereumAddress\n     */\n    'EcdsaSecp256k1RecoveryMethod2020',\n    /**\n     * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is not an ethereumAddress\n     */\n    'Secp256k1VerificationKey2018',\n    /**\n     * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is not an ethereumAddress\n     */\n    'Secp256k1SignatureVerificationKey2018',\n    /**\n     * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is not an ethereumAddress\n     */\n    'EcdsaPublicKeySecp256k1'\n  ],\n  Ed25519: ['ED25519SignatureVerification', 'Ed25519VerificationKey2018'],\n  EdDSA: ['ED25519SignatureVerification', 'Ed25519VerificationKey2018']\n}\n\nconst defaultAlg = 'ES256K'\nconst DID_JSON = 'application/did+json'\n\nfunction encodeSection(data: any): string {\n  return encodeBase64url(JSON.stringify(data))\n}\n\nexport const NBF_SKEW: number = 300\n\nfunction decodeJWS(jws: string): JWSDecoded {\n  const parts: RegExpMatchArray = jws.match(/^([a-zA-Z0-9_-]+)\\.([a-zA-Z0-9_-]+)\\.([a-zA-Z0-9_-]+)$/)\n  if (parts) {\n    return {\n      header: JSON.parse(decodeBase64url(parts[1])),\n      payload: parts[2],\n      signature: parts[3],\n      data: `${parts[1]}.${parts[2]}`\n    }\n  }\n  throw new Error('Incorrect format JWS')\n}\n\n/**  @module did-jwt/JWT */\n\n/**\n *  Decodes a JWT and returns an object representing the payload\n *\n *  @example\n *  decodeJWT('eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJpYXQiOjE1...')\n *\n *  @param    {String}            jwt                a JSON Web Token to verify\n *  @return   {Object}                               a JS object representing the decoded JWT\n */\nexport function decodeJWT(jwt: string): JWTDecoded {\n  if (!jwt) throw new Error('no JWT passed into decodeJWT')\n  try {\n    const jws = decodeJWS(jwt)\n    const decodedJwt: JWTDecoded = Object.assign(jws, { payload: JSON.parse(decodeBase64url(jws.payload)) })\n    return decodedJwt\n  } catch (e) {\n    throw new Error('Incorrect format JWT')\n  }\n}\n\n/**\n *  Creates a signed JWS given a payload, a signer, and an optional header.\n *\n *  @example\n *  const signer = ES256KSigner(process.env.PRIVATE_KEY)\n *  const jws = await createJWS({ my: 'payload' }, signer)\n *\n *  @param    {Object}            payload           payload object\n *  @param    {Signer}            signer            a signer, see `ES256KSigner or `EdDSASigner`\n *  @param    {Object}            header            optional object to specify or customize the JWS header\n *  @return   {Promise<Object, Error>}              a promise which resolves with a JWS string or rejects with an error\n */\nexport async function createJWS(\n  payload: string | any,\n  signer: Signer,\n  header: Partial<JWTHeader> = {}\n): Promise<string> {\n  if (!header.alg) header.alg = defaultAlg\n  const encodedPayload = typeof payload === 'string' ? payload : encodeSection(payload)\n  const signingInput: string = [encodeSection(header), encodedPayload].join('.')\n\n  const jwtSigner: SignerAlgorithm = SignerAlg(header.alg)\n  const signature: string = await jwtSigner(signingInput, signer)\n  return [signingInput, signature].join('.')\n}\n\n/**\n *  Creates a signed JWT given an address which becomes the issuer, a signer, and a payload for which the signature is over.\n *\n *  @example\n *  const signer = ES256KSigner(process.env.PRIVATE_KEY)\n *  createJWT({address: '5A8bRWU3F7j3REx3vkJ...', signer}, {key1: 'value', key2: ..., ... }).then(jwt => {\n *      ...\n *  })\n *\n *  @param    {Object}            payload            payload object\n *  @param    {Object}            [options]          an unsigned credential object\n *  @param    {String}            options.issuer     The DID of the issuer (signer) of JWT\n *  @param    {String}            options.alg        [DEPRECATED] The JWT signing algorithm to use. Supports: [ES256K, ES256K-R, Ed25519, EdDSA], Defaults to: ES256K.\n *                                                   Please use `header.alg` to specify the algorithm\n *  @param    {Signer}            options.signer     a `Signer` function, Please see `ES256KSigner` or `EdDSASigner`\n *  @param    {Object}            header             optional object to specify or customize the JWT header\n *  @return   {Promise<Object, Error>}               a promise which resolves with a signed JSON Web Token or rejects with an error\n */\nexport async function createJWT(\n  payload: any,\n  { issuer, signer, alg, expiresIn }: JWTOptions,\n  header: Partial<JWTHeader> = {}\n): Promise<string> {\n  if (!signer) throw new Error('No Signer functionality has been configured')\n  if (!issuer) throw new Error('No issuing DID has been configured')\n  if (!header.typ) header.typ = 'JWT'\n  if (!header.alg) header.alg = alg\n  const timestamps: Partial<JWTPayload> = {\n    iat: Math.floor(Date.now() / 1000),\n    exp: undefined\n  }\n  if (expiresIn) {\n    if (typeof expiresIn === 'number') {\n      timestamps.exp = (payload.nbf || timestamps.iat) + Math.floor(expiresIn)\n    } else {\n      throw new Error('JWT expiresIn is not a number')\n    }\n  }\n  const fullPayload = { ...timestamps, ...payload, iss: issuer }\n  return createJWS(fullPayload, signer, header)\n}\n\nfunction verifyJWSDecoded(\n  { header, data, signature }: JWSDecoded,\n  pubkeys: VerificationMethod | VerificationMethod[]\n): VerificationMethod {\n  if (!Array.isArray(pubkeys)) pubkeys = [pubkeys]\n  const signer: VerificationMethod = VerifierAlgorithm(header.alg)(data, signature, pubkeys)\n  return signer\n}\n\n/**\n *  Verifies given JWS. If the JWS is valid, returns the public key that was\n *  used to sign the JWS, or throws an `Error` if none of the `pubkeys` match.\n *\n *  @example\n *  const pubkey = verifyJWT('eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJyZXF1Z....', { publicKeyHex: '0x12341...' })\n *\n *  @param    {String}                          jws         A JWS string to verify\n *  @param    {Array<VerificationMethod> | VerificationMethod}    pubkeys     The public keys used to verify the JWS\n *  @return   {VerificationMethod}                       The public key used to sign the JWS\n */\nexport function verifyJWS(jws: string, pubkeys: VerificationMethod | VerificationMethod[]): VerificationMethod {\n  const jwsDecoded: JWSDecoded = decodeJWS(jws)\n  return verifyJWSDecoded(jwsDecoded, pubkeys)\n}\n\n/**\n *  Verifies given JWT. If the JWT is valid, the promise returns an object including the JWT, the payload of the JWT,\n *  and the did doc of the issuer of the JWT.\n *\n *  @example\n *  verifyJWT('did:uport:eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJyZXF1Z....', {audience: '5A8bRWU3F7j3REx3vkJ...', callbackUrl: 'https://...'}).then(obj => {\n *      const did = obj.did // DID of signer\n *      const payload = obj.payload\n *      const doc = obj.doc // DID Document of signer\n *      const jwt = obj.jwt\n *      const signerKeyId = obj.signerKeyId // ID of key in DID document that signed JWT\n *      ...\n *  })\n *\n *  @param    {String}            jwt                a JSON Web Token to verify\n *  @param    {Object}            [options]           an unsigned credential object\n *  @param    {Boolean}           options.auth        Require signer to be listed in the authentication section of the DID document (for Authentication purposes)\n *  @param    {String}            options.audience    DID of the recipient of the JWT\n *  @param    {String}            options.callbackUrl callback url in JWT\n *  @return   {Promise<Object, Error>}               a promise which resolves with a response object or rejects with an error\n */\nexport async function verifyJWT(\n  jwt: string,\n  options: JWTVerifyOptions = {\n    resolver: null,\n    auth: null,\n    audience: null,\n    callbackUrl: null,\n    skewTime: null,\n    proofPurpose: null\n  }\n): Promise<JWTVerified> {\n  if (!options.resolver) throw new Error('No DID resolver has been configured')\n  const { payload, header, signature, data }: JWTDecoded = decodeJWT(jwt)\n  const proofPurpose: string | undefined = options.hasOwnProperty('auth')\n    ? options.auth\n      ? 'authentication'\n      : undefined\n    : options.proofPurpose\n  const { didResolutionResult, authenticators, issuer }: DIDAuthenticator = await resolveAuthenticator(\n    options.resolver,\n    header.alg,\n    payload.iss,\n    proofPurpose\n  )\n  const signer: VerificationMethod = await verifyJWSDecoded({ header, data, signature } as JWSDecoded, authenticators)\n  const now: number = Math.floor(Date.now() / 1000)\n  const skewTime = options.skewTime >= 0 ? options.skewTime : NBF_SKEW\n  if (signer) {\n    const nowSkewed = now + skewTime\n    if (payload.nbf) {\n      if (payload.nbf > nowSkewed) {\n        throw new Error(`JWT not valid before nbf: ${payload.nbf}`)\n      }\n    } else if (payload.iat && payload.iat > nowSkewed) {\n      throw new Error(`JWT not valid yet (issued in the future) iat: ${payload.iat}`)\n    }\n    if (payload.exp && payload.exp <= now - skewTime) {\n      throw new Error(`JWT has expired: exp: ${payload.exp} < now: ${now}`)\n    }\n    if (payload.aud) {\n      if (!options.audience && !options.callbackUrl) {\n        throw new Error('JWT audience is required but your app address has not been configured')\n      }\n      const audArray = Array.isArray(payload.aud) ? payload.aud : [payload.aud]\n      const matchedAudience = audArray.find((item) => options.audience === item || options.callbackUrl === item)\n\n      if (typeof matchedAudience === 'undefined') {\n        throw new Error(`JWT audience does not match your DID or callback url`)\n      }\n    }\n    return { payload, didResolutionResult, issuer, signer, jwt }\n  }\n}\n\n/**\n * Resolves relevant public keys or other authenticating material used to verify signature from the DID document of provided DID\n *\n *  @example\n *  resolveAuthenticator(resolver, 'ES256K', 'did:uport:2nQtiQG6Cgm1GYTBaaKAgr76uY7iSexUkqX').then(obj => {\n *      const payload = obj.payload\n *      const profile = obj.profile\n *      const jwt = obj.jwt\n *      ...\n *  })\n *\n *  @param    {String}            alg                a JWT algorithm\n *  @param    {String}            did                a Decentralized IDentifier (DID) to lookup\n *  @param    {Boolean}           auth               Restrict public keys to ones specifically listed in the 'authentication' section of DID document\n *  @return   {Promise<DIDAuthenticator>}               a promise which resolves with a response object containing an array of authenticators or if non exist rejects with an error\n */\nexport async function resolveAuthenticator(\n  resolver: Resolver,\n  alg: string,\n  issuer: string,\n  proofPurpose?: string\n): Promise<DIDAuthenticator> {\n  const types: string[] = SUPPORTED_PUBLIC_KEY_TYPES[alg]\n  if (!types || types.length === 0) {\n    throw new Error(`No supported signature types for algorithm ${alg}`)\n  }\n  let didResult: DIDResolutionResult\n\n  const result = (await resolver.resolve(issuer, { accept: DID_JSON })) as unknown\n  // support legacy resolvers that do not produce DIDResolutionResult\n  if (Object.getOwnPropertyNames(result).indexOf('didDocument') === -1) {\n    didResult = {\n      didDocument: result as DIDDocument,\n      didDocumentMetadata: {},\n      didResolutionMetadata: { contentType: DID_JSON }\n    }\n  } else {\n    didResult = result as DIDResolutionResult\n  }\n\n  if (didResult.didResolutionMetadata?.error) {\n    const { error, message } = didResult.didResolutionMetadata\n    throw new Error(`Unable to resolve DID document for ${issuer}: ${error}, ${message || ''}`)\n  }\n\n  const getPublicKeyById = (verificationMethods: VerificationMethod[], pubid: string): VerificationMethod | null => {\n    const filtered = verificationMethods.filter(({ id }) => pubid === id)\n    return filtered.length > 0 ? filtered[0] : null\n  }\n\n  let publicKeysToCheck: VerificationMethod[] = [\n    ...(didResult?.didDocument?.verificationMethod || []),\n    ...(didResult?.didDocument?.publicKey || [])\n  ]\n  if (typeof proofPurpose === 'string') {\n    // support legacy DID Documents that do not list assertionMethod\n    if (proofPurpose.startsWith('assertion') && !didResult.didDocument.hasOwnProperty('assertionMethod')) {\n      didResult.didDocument.assertionMethod = [...publicKeysToCheck.map((pk) => pk.id)]\n    }\n\n    publicKeysToCheck = (didResult.didDocument[proofPurpose] || [])\n      .map((verificationMethod) => {\n        if (typeof verificationMethod === 'string') {\n          return getPublicKeyById(publicKeysToCheck, verificationMethod)\n        } else if (typeof (<any>verificationMethod).publicKey === 'string') {\n          // this is a legacy format\n          return getPublicKeyById(publicKeysToCheck, (<any>verificationMethod).publicKey)\n        } else {\n          return <VerificationMethod>verificationMethod\n        }\n      })\n      .filter((key) => key != null)\n  }\n\n  const authenticators: VerificationMethod[] = publicKeysToCheck.filter(({ type }) =>\n    types.find((supported) => supported === type)\n  )\n\n  if (typeof proofPurpose === 'string' && (!authenticators || authenticators.length === 0)) {\n    throw new Error(\n      `DID document for ${issuer} does not have public keys suitable for ${alg} with ${proofPurpose} purpose`\n    )\n  }\n  if (!authenticators || authenticators.length === 0) {\n    throw new Error(`DID document for ${issuer} does not have public keys for ${alg}`)\n  }\n  return { authenticators, issuer, didResolutionResult: didResult }\n}\n","import { base64ToBytes, bytesToBase64url, decodeBase64url, toSealed } from './util'\n\ninterface RecipientHeader {\n  alg: string\n  iv: string\n  tag: string\n  epk?: Record<string, any> // Ephemeral  Public Key\n  kid?: string\n}\n\nexport interface Recipient {\n  header: RecipientHeader\n  encrypted_key: string\n}\n\nexport interface JWE {\n  protected: string\n  iv: string\n  ciphertext: string\n  tag: string\n  aad?: string\n  recipients?: Recipient[]\n}\n\nexport interface EncryptionResult {\n  ciphertext: Uint8Array\n  tag: Uint8Array\n  iv: Uint8Array\n  protectedHeader?: string\n  recipient?: Recipient\n  cek?: Uint8Array\n}\n\nexport interface Encrypter {\n  alg: string\n  enc: string\n  encrypt: (cleartext: Uint8Array, protectedHeader: Record<string, any>, aad?: Uint8Array) => Promise<EncryptionResult>\n  encryptCek?: (cek: Uint8Array) => Promise<Recipient>\n}\n\nexport interface Decrypter {\n  alg: string\n  enc: string\n  decrypt: (\n    sealed: Uint8Array,\n    iv: Uint8Array,\n    aad?: Uint8Array,\n    recipient?: Record<string, any>\n  ) => Promise<Uint8Array>\n}\n\nfunction validateJWE(jwe: JWE) {\n  if (!(jwe.protected && jwe.iv && jwe.ciphertext && jwe.tag)) {\n    throw new Error('Invalid JWE')\n  }\n  if (jwe.recipients) {\n    jwe.recipients.map((rec) => {\n      if (!(rec.header && rec.encrypted_key)) {\n        throw new Error('Invalid JWE')\n      }\n    })\n  }\n}\n\nfunction encodeJWE({ ciphertext, tag, iv, protectedHeader, recipient }: EncryptionResult, aad?: Uint8Array): JWE {\n  const jwe: JWE = {\n    protected: protectedHeader,\n    iv: bytesToBase64url(iv),\n    ciphertext: bytesToBase64url(ciphertext),\n    tag: bytesToBase64url(tag)\n  }\n  if (aad) jwe.aad = bytesToBase64url(aad)\n  if (recipient) jwe.recipients = [recipient]\n  return jwe\n}\n\nexport async function createJWE(\n  cleartext: Uint8Array,\n  encrypters: Encrypter[],\n  protectedHeader = {},\n  aad?: Uint8Array\n): Promise<JWE> {\n  if (encrypters[0].alg === 'dir') {\n    if (encrypters.length > 1) throw new Error('Can only do \"dir\" encryption to one key.')\n    const encryptionResult = await encrypters[0].encrypt(cleartext, protectedHeader, aad)\n    return encodeJWE(encryptionResult, aad)\n  } else {\n    const tmpEnc = encrypters[0].enc\n    if (!encrypters.reduce((acc, encrypter) => acc && encrypter.enc === tmpEnc, true)) {\n      throw new Error('Incompatible encrypters passed')\n    }\n    let cek\n    let jwe\n    for (const encrypter of encrypters) {\n      if (!cek) {\n        const encryptionResult = await encrypter.encrypt(cleartext, protectedHeader, aad)\n        cek = encryptionResult.cek\n        jwe = encodeJWE(encryptionResult, aad)\n      } else {\n        jwe.recipients.push(await encrypter.encryptCek(cek))\n      }\n    }\n    return jwe\n  }\n}\n\nexport async function decryptJWE(jwe: JWE, decrypter: Decrypter): Promise<Uint8Array> {\n  validateJWE(jwe)\n  const protHeader = JSON.parse(decodeBase64url(jwe.protected))\n  if (protHeader.enc !== decrypter.enc) throw new Error(`Decrypter does not support: '${protHeader.enc}'`)\n  const sealed = toSealed(jwe.ciphertext, jwe.tag)\n  const aad = new Uint8Array(Buffer.from(jwe.aad ? `${jwe.protected}.${jwe.aad}` : jwe.protected))\n  let cleartext = null\n  if (protHeader.alg === 'dir' && decrypter.alg === 'dir') {\n    cleartext = await decrypter.decrypt(sealed, base64ToBytes(jwe.iv), aad)\n  } else if (!jwe.recipients || jwe.recipients.length === 0) {\n    throw new Error('Invalid JWE')\n  } else {\n    for (let i = 0; !cleartext && i < jwe.recipients.length; i++) {\n      const recipient = jwe.recipients[i]\n      Object.assign(recipient.header, protHeader)\n      if (recipient.header.alg === decrypter.alg) {\n        cleartext = await decrypter.decrypt(sealed, base64ToBytes(jwe.iv), aad, recipient)\n      }\n    }\n  }\n  if (cleartext === null) throw new Error('Failed to decrypt')\n  return cleartext\n}\n","import { XChaCha20Poly1305 } from '@stablelib/xchacha20poly1305'\nimport { generateKeyPair, sharedKey } from '@stablelib/x25519'\nimport { randomBytes } from '@stablelib/random'\nimport { concatKDF } from './Digest'\nimport { bytesToBase64url, base58ToBytes, encodeBase64url, toSealed, base64ToBytes } from './util'\nimport { Recipient, EncryptionResult, Encrypter, Decrypter } from './JWE'\nimport type { VerificationMethod, Resolver } from 'did-resolver'\n\nfunction xc20pEncrypter(key: Uint8Array): (cleartext: Uint8Array, aad?: Uint8Array) => EncryptionResult {\n  const cipher = new XChaCha20Poly1305(key)\n  return (cleartext: Uint8Array, aad?: Uint8Array) => {\n    const iv = randomBytes(cipher.nonceLength)\n    const sealed = cipher.seal(iv, cleartext, aad)\n    return {\n      ciphertext: sealed.subarray(0, sealed.length - cipher.tagLength),\n      tag: sealed.subarray(sealed.length - cipher.tagLength),\n      iv\n    }\n  }\n}\n\nexport function xc20pDirEncrypter(key: Uint8Array): Encrypter {\n  const xc20pEncrypt = xc20pEncrypter(key)\n  const enc = 'XC20P'\n  const alg = 'dir'\n  async function encrypt(cleartext, protectedHeader = {}, aad?): Promise<EncryptionResult> {\n    const protHeader = encodeBase64url(JSON.stringify(Object.assign({ alg }, protectedHeader, { enc })))\n    const encodedAad = new Uint8Array(Buffer.from(aad ? `${protHeader}.${bytesToBase64url(aad)}` : protHeader))\n    return {\n      ...xc20pEncrypt(cleartext, encodedAad),\n      protectedHeader: protHeader\n    }\n  }\n  return { alg, enc, encrypt }\n}\n\nexport function xc20pDirDecrypter(key: Uint8Array): Decrypter {\n  const cipher = new XChaCha20Poly1305(key)\n  async function decrypt(sealed, iv, aad?): Promise<Uint8Array> {\n    return cipher.open(iv, sealed, aad)\n  }\n  return { alg: 'dir', enc: 'XC20P', decrypt }\n}\n\nexport function x25519Encrypter(publicKey: Uint8Array, kid?: string): Encrypter {\n  const alg = 'ECDH-ES+XC20PKW'\n  const keyLen = 256\n  const crv = 'X25519'\n  async function encryptCek(cek): Promise<Recipient> {\n    const epk = generateKeyPair()\n    const sharedSecret = sharedKey(epk.secretKey, publicKey)\n    // Key Encryption Key\n    const kek = concatKDF(sharedSecret, keyLen, alg)\n    const res = xc20pEncrypter(kek)(cek)\n    const recipient: Recipient = {\n      encrypted_key: bytesToBase64url(res.ciphertext),\n      header: {\n        alg,\n        iv: bytesToBase64url(res.iv),\n        tag: bytesToBase64url(res.tag),\n        epk: { kty: 'OKP', crv, x: bytesToBase64url(epk.publicKey) }\n      }\n    }\n    if (kid) recipient.header.kid = kid\n    return recipient\n  }\n  async function encrypt(cleartext, protectedHeader = {}, aad?): Promise<EncryptionResult> {\n    // we won't want alg to be set to dir from xc20pDirEncrypter\n    Object.assign(protectedHeader, { alg: undefined })\n    // Content Encryption Key\n    const cek = randomBytes(32)\n    return {\n      ...(await xc20pDirEncrypter(cek).encrypt(cleartext, protectedHeader, aad)),\n      recipient: await encryptCek(cek),\n      cek\n    }\n  }\n  return { alg, enc: 'XC20P', encrypt, encryptCek }\n}\n\nexport async function resolveX25519Encrypters(dids: string[], resolver: Resolver): Promise<Encrypter[]> {\n  return Promise.all(\n    dids.map(async (did) => {\n      const { didResolutionMetadata, didDocument } = await resolver.resolve(did)\n      if (didResolutionMetadata?.error) {\n        throw new Error(\n          `Could not find x25519 key for ${did}: ${didResolutionMetadata.error}, ${didResolutionMetadata.message}`\n        )\n      }\n      if (!didDocument.keyAgreement) throw new Error(`Could not find x25519 key for ${did}`)\n      const agreementKeys: VerificationMethod[] = didDocument.keyAgreement?.map((key) => {\n        if (typeof key === 'string') {\n          return [...(didDocument.publicKey || []), ...(didDocument.verificationMethod || [])].find(\n            (pk) => pk.id === key\n          )\n        }\n        return key\n      })\n      const pk = agreementKeys.find((key) => {\n        return key.type === 'X25519KeyAgreementKey2019' && Boolean(key.publicKeyBase58)\n      })\n      if (!pk) throw new Error(`Could not find x25519 key for ${did}`)\n      return x25519Encrypter(base58ToBytes(pk.publicKeyBase58), pk.id)\n    })\n  )\n}\n\nfunction validateHeader(header: Record<string, any>) {\n  if (!(header.epk && header.iv && header.tag)) {\n    throw new Error('Invalid JWE')\n  }\n}\n\nexport function x25519Decrypter(secretKey: Uint8Array): Decrypter {\n  const alg = 'ECDH-ES+XC20PKW'\n  const keyLen = 256\n  const crv = 'X25519'\n  async function decrypt(sealed, iv, aad, recipient): Promise<Uint8Array> {\n    validateHeader(recipient.header)\n    if (recipient.header.epk.crv !== crv) return null\n    const publicKey = base64ToBytes(recipient.header.epk.x)\n    const sharedSecret = sharedKey(secretKey, publicKey)\n\n    // Key Encryption Key\n    const kek = concatKDF(sharedSecret, keyLen, alg)\n    // Content Encryption Key\n    const sealedCek = toSealed(recipient.encrypted_key, recipient.header.tag)\n    const cek = await xc20pDirDecrypter(kek).decrypt(sealedCek, base64ToBytes(recipient.header.iv))\n    if (cek === null) return null\n\n    return xc20pDirDecrypter(cek).decrypt(sealed, iv, aad)\n  }\n  return { alg, enc: 'XC20P', decrypt }\n}\n","import { Signer } from '../JWT'\nimport { ES256KSigner } from './ES256KSigner'\n\n/**\n * @deprecated Please use ES256KSigner\n *  The EllipticSigner returns a configured function for signing data.\n *\n *  @example\n *  ```typescript\n *  const signer = EllipticSigner(process.env.PRIVATE_KEY)\n *  signer(data).then( (signature: string) => {\n *    ...\n *  })\n *  ```\n *\n *  @param    {String}         hexPrivateKey    a hex encoded private key\n *  @return   {Function}                        a configured signer function\n */\nfunction EllipticSigner(hexPrivateKey: string): Signer {\n  return ES256KSigner(hexPrivateKey)\n}\n\nexport default EllipticSigner\n","import { EdDSASigner as EdDSASigner } from './EdDSASigner'\nimport { Signer } from '../JWT'\n\n/**\n * @deprecated Please use EdDSASigner\n *\n *  The NaclSigner returns a configured function for signing data using the Ed25519 algorithm.\n *\n *  The signing function itself takes the data as a `string` or `Uint8Array` parameter and returns a `base64Url`-encoded signature.\n *\n *  @example\n *  const signer = NaclSigner(process.env.PRIVATE_KEY)\n *  const data: string = '...'\n *  signer(data).then( (signature: string) => {\n *    ...\n *  })\n *\n *  @param    {String}   base64PrivateKey    a 64 byte base64 encoded private key\n *  @return   {Function}                     a configured signer function\n */\n\nfunction NaclSigner(base64PrivateKey: string): Signer {\n  return EdDSASigner(base64PrivateKey)\n}\n\nexport default NaclSigner\n","import { fromJose } from '../util'\nimport { Signer } from '../JWT'\nimport { ES256KSigner } from './ES256KSigner'\n\n/**\n * @deprecated Please use ES256KSigner\n *  The SimpleSigner returns a configured function for signing data.\n *\n *  @example\n *  const signer = SimpleSigner(process.env.PRIVATE_KEY)\n *  signer(data, (err, signature) => {\n *    ...\n *  })\n *\n *  @param    {String}         hexPrivateKey    a hex encoded private key\n *  @return   {Function}                     a configured signer function\n */\nfunction SimpleSigner(hexPrivateKey: string): Signer {\n  const signer = ES256KSigner(hexPrivateKey, true)\n  return async (data) => {\n    const signature = (await signer(data)) as string\n    return fromJose(signature)\n  }\n}\n\nexport default SimpleSigner\n"],"names":["bytesToBase64url","b","u8a","base64ToBytes","s","inputBase64Url","replace","base58ToBytes","hexToBytes","input","startsWith","substring","toLowerCase","encodeBase64url","decodeBase64url","bytesToHex","stringToBytes","toJose","r","recoveryParam","recoverable","jose","Uint8Array","set","undefined","Error","fromJose","signature","signatureBytes","length","TypeError","slice","toSealed","ciphertext","tag","hexMatcher","base58Matcher","base64Matcher","parseKey","test","leftpad","data","size","repeat","sha256","payload","hash","toEthereumAddress","hexPublicKey","hashInput","keccak_256","arrayBuffer","writeUint32BE","value","array","encoded","toString","lengthAndInput","concatKDF","secret","keyLen","alg","secp256k1","EC","ES256KSigner","privateKey","privateKeyBytes","keyPair","keyFromPrivate","sign","EdDSASigner","secretKey","dataBytes","sig","toSignatureObject","rawsig","sigObj","extractPublicKeyBytes","pk","publicKeyBase58","publicKeyBase64","publicKeyHex","verifyRecoverableES256K","authenticators","signatures","so","signer","map","recoveredKey","recoverPubKey","recoveredPublicKeyHex","encode","recoveredCompressedPublicKeyHex","recoveredAddress","find","keyHex","ethereumAddress","blockchainAccountId","split","filter","key","verifyEd25519","clear","verify","algorithms","ES256K","fullPublicKeys","ethAddressKeys","pubBytes","keyFromPublic","err","ES256K-R","Ed25519","EdDSA","VerifierAlgorithm","impl","instanceOfEcdsaSignature","object","ES256KSignerAlg","Ed25519SignerAlg","createJWS","header","defaultAlg","encodedPayload","encodeSection","signingInput","join","jwtSigner","SignerAlg","SUPPORTED_PUBLIC_KEY_TYPES","JSON","stringify","decodeJWS","jws","parts","match","parse","decodeJWT","jwt","Object","assign","e","verifyJWSDecoded","pubkeys","Array","isArray","decryptJWE","bind","pact","_settle","state","onFulfilled","_this","onRejected","result","encodeJWE","iv","protectedHeader","recipient","aad","jwe","protected","recipients","xc20pEncrypter","cipher","XChaCha20Poly1305","cleartext","randomBytes","nonceLength","sealed","seal","subarray","tagLength","xc20pDirEncrypter","xc20pEncrypt","enc","encrypt","protHeader","encodedAad","Buffer","from","xc20pDirDecrypter","decrypt","open","x25519Encrypter","publicKey","kid","encryptCek","cek","epk","generateKeyPair","res","sharedKey","encrypted_key","kty","crv","x","hexPrivateKey","base64PrivateKey","encrypters","encryptionResult","tmpEnc","reduce","acc","encrypter","_jwe$recipients","push","_push","issuer","expiresIn","typ","timestamps","iat","Math","floor","Date","now","exp","nbf","fullPayload","iss","decrypter","rec","validateJWE","i","dids","resolver","Promise","all","did","resolve","didResolutionMetadata","didDocument","error","message","keyAgreement","_didDocument$keyAgree","verificationMethod","id","type","Boolean","options","auth","audience","callbackUrl","skewTime","proofPurpose","hasOwnProperty","types","didResult","accept","getOwnPropertyNames","indexOf","didDocumentMetadata","contentType","_didResult$didResolut","getPublicKeyById","verificationMethods","pubid","filtered","publicKeysToCheck","assertionMethod","supported","didResolutionResult","resolveAuthenticator","nowSkewed","aud","item","validateHeader","kek","sealedCek"],"mappings":"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"}